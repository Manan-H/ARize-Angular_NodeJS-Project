{"version":3,"sources":["ng://@ng-toolkit/universal/ngt-universal/window.service.ts","ng://@ng-toolkit/universal/ngt-universal/local-storage-wrapper.service.ts","ng://@ng-toolkit/universal/ngt-universal/document.service.ts","ng://@ng-toolkit/universal/ngt-universal/ngt-universal.module.ts"],"names":["WindowService","platformId","isPlatformBrowser","this","_window","window","navigator","userAgent","Object","defineProperty","prototype","Injectable","Inject","args","PLATFORM_ID","LocalStorageWrapper","localStorageRef","localStorage","clear","getItem","key","index","removeItem","setItem","value","length","DocumentService","console","log","_document","getElementById","id","HTMLElement","getElementsByClassName","className","HTMLCollection","getElementsByName","name","NodeList","getElementsByTagName","WINDOW","InjectionToken","windowFactory","windowService","nativeWindow","LOCAL_STORAGE","localStorageFactory","localStorageWrapper","NGT_DOCUMENT","documentFactory","documentService","nativeDocument","NgtUniversalModule","NgModule","providers","provide","useFactory","deps"],"mappings":"wXAAA,IAAAA,EAAA,WAMI,SAAAA,EAAiCC,GACxBC,EAAAA,kBAAkBD,GAKnBE,KAAKC,QAAUC,OAFfF,KAAKC,QAAO,CAAIE,UAAW,CAACC,UAAW,cASnD,OAHIC,OAAAC,eAAIT,EAAAU,UAAA,eAAY,KAAhB,WACI,OAAOP,KAAKC,6DAdnBO,EAAAA,kFAGgBC,EAAAA,OAAMC,KAAA,CAACC,EAAAA,kBAaxBd,EAnBA,GCAAe,EAAA,WAOI,SAAAA,EAAiCd,GACzBC,EAAAA,kBAAkBD,GAClBE,KAAKa,gBAAkBC,aAEvBd,KAAKa,gBAAkB,CACvBE,MAAO,aACPC,QAAS,SAACC,GAAW,OAAA,WACrBA,IAAK,SAACC,GAAa,OAAA,WACnBC,WAAY,SAACF,KACbG,QAAS,SAACH,EAAaI,KACvBC,OAAQ,GAQpB,OAHIjB,OAAAC,eAAIM,EAAAL,UAAA,eAAY,KAAhB,WACI,OAAOP,KAAKa,qEApBnBL,EAAAA,kFAIgBC,EAAAA,OAAMC,KAAA,CAACC,EAAAA,kBAkBxBC,EAzBA,GCAAW,EAAA,WAMI,SAAAA,EAAiCzB,GACxBC,EAAAA,kBAAkBD,IAQnB0B,QAAQC,IAAI,kCAEZzB,KAAK0B,UAAS,IATd1B,KAAK0B,UAAS,CACVC,eAAgB,SAACC,GAAe,OAAA,IAAIC,aACpCC,uBAAwB,SAACC,GAAsB,OAAA,IAAIC,gBACnDC,kBAAmB,SAACC,GAAiB,OAAA,IAAIC,UACzCC,qBAAsB,SAACF,GAAiB,OAAA,IAAIC,WAc5D,OALI9B,OAAAC,eAAIiB,EAAAhB,UAAA,iBAAc,KAAlB,WAGI,OAFAiB,QAAQC,IAAI,uBACZD,QAAQC,IAAIzB,KAAK0B,WACV1B,KAAK0B,+DArBnBlB,EAAAA,kFAGgBC,EAAAA,OAAMC,KAAA,CAACC,EAAAA,kBAoBxBY,EA1BA,GCOac,EAAS,IAAIC,EAAAA,eAAe,qBAEzC,SAAgBC,EAAcC,GAC1B,OAAOA,EAAcC,aAGzB,IAAaC,EAAgB,IAAIJ,EAAAA,eAAe,4BAEhD,SAAgBK,EAAoBC,GAChC,OAAOA,EAAoB9B,aAG/B,IAAa+B,EAAe,IAAIP,EAAAA,eAAe,uBAE/C,SAAgBQ,EAAgBC,GAE5B,OADAvB,QAAQC,IAAI,oBACLsB,EAAgBC,eAG3B,IAAAC,EAAA,WAAA,SAAAA,KAUiC,2BAVhCC,EAAAA,SAAQxC,KAAA,CAAC,CACNyC,UAAW,CACPtD,EACA,CAAEuD,QAASf,EAAQgB,WAAYd,EAAee,KAAM,CAACzD,IACrD0B,EACA,CAAE6B,QAASP,EAAcQ,WAAYP,EAAiBQ,KAAM,CAAC/B,IAC7DX,EACA,CAAEwC,QAASV,EAAeW,WAAYV,EAAqBW,KAAM,CAAC1C,SAGzCqC,EAVjC","sourcesContent":["import { Injectable, Inject, PLATFORM_ID, InjectionToken } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class WindowService {\n    private _window: Window;\n    constructor(@Inject(PLATFORM_ID) platformId: any) {\n        if (!isPlatformBrowser(platformId)) {\n            // const req: any = this.injector.get(this.injector.get(USERAGENTTOKEN));\n            // this._window = {navigator: {userAgent: req.get('User-Agent')}};\n            this._window = {navigator: {userAgent: 'fakeAgent'}} as Window;\n        } else {\n            this._window = window;\n        }\n    }\n\n    get nativeWindow(): any {\n        return this._window;\n    }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class LocalStorageWrapper {\n    private localStorageRef;\n\n    constructor(@Inject(PLATFORM_ID) platformId) {\n        if (isPlatformBrowser(platformId)) {\n            this.localStorageRef = localStorage;\n        } else {\n            this.localStorageRef = {\n            clear: () => {/*noop*/},\n            getItem: (key: string) => undefined as string,\n            key: (index: number) => undefined as string,\n            removeItem: (key: string) => {/*noop*/},\n            setItem: (key: string, value: string) => {/*noop*/},\n            length: 0\n            };\n        }\n    }\n\n    get localStorage() {\n        return this.localStorageRef;\n    }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class DocumentService {\n    private _document: Document;\n    constructor(@Inject(PLATFORM_ID) platformId: any) {\n        if (!isPlatformBrowser(platformId)) {\n            this._document = <unknown> {\n                getElementById: (id: string) => new HTMLElement(),\n                getElementsByClassName: (className: string) => new HTMLCollection(),\n                getElementsByName: (name: string) => new NodeList(),\n                getElementsByTagName: (name: string) => new NodeList()\n            } as Document;\n        } else {\n            console.log('in browser, assigning document');\n            // this._document = document;\n            this._document = {} as Document;\n        }\n    }\n\n    get nativeDocument(): Document {\n        console.log('get native document');\n        console.log(this._document);\n        return this._document;\n    }\n}\n","import { NgModule, InjectionToken } from '@angular/core';\nimport { WindowService } from './window.service';\nimport { LocalStorageWrapper } from './local-storage-wrapper.service';\nimport { DocumentService } from './document.service';\n\nexport * from './document.service';\n\nexport const WINDOW = new InjectionToken('ng-toolkit-window');\n\nexport function windowFactory(windowService: WindowService) {\n    return windowService.nativeWindow;\n}\n\nexport const LOCAL_STORAGE = new InjectionToken('ng-toolkit-local-storage');\n\nexport function localStorageFactory(localStorageWrapper: LocalStorageWrapper) {\n    return localStorageWrapper.localStorage;\n}\n\nexport const NGT_DOCUMENT = new InjectionToken('ng-toolkit-document');\n\nexport function documentFactory(documentService: DocumentService) {\n    console.log('document factory');\n    return documentService.nativeDocument;\n}\n\n@NgModule({\n    providers: [\n        WindowService,\n        { provide: WINDOW, useFactory: windowFactory, deps: [WindowService] },\n        DocumentService,\n        { provide: NGT_DOCUMENT, useFactory: documentFactory, deps: [DocumentService] },\n        LocalStorageWrapper,\n        { provide: LOCAL_STORAGE, useFactory: localStorageFactory, deps: [LocalStorageWrapper] }\n    ]\n})\nexport class NgtUniversalModule {}\n"]}