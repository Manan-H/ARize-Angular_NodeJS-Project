/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
var DocumentService = /** @class */ (function () {
    function DocumentService(platformId) {
        if (!isPlatformBrowser(platformId)) {
            this._document = (/** @type {?} */ ((/** @type {?} */ ({
                getElementById: function (id) { return new HTMLElement(); },
                getElementsByClassName: function (className) { return new HTMLCollection(); },
                getElementsByName: function (name) { return new NodeList(); },
                getElementsByTagName: function (name) { return new NodeList(); }
            }))));
        }
        else {
            console.log('in browser, assigning document');
            // this._document = document;
            this._document = (/** @type {?} */ ({}));
        }
    }
    Object.defineProperty(DocumentService.prototype, "nativeDocument", {
        get: /**
         * @return {?}
         */
        function () {
            console.log('get native document');
            console.log(this._document);
            return this._document;
        },
        enumerable: true,
        configurable: true
    });
    DocumentService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    DocumentService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return DocumentService;
}());
export { DocumentService };
if (false) {
    /** @type {?} */
    DocumentService.prototype._document;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy10b29sa2l0L3VuaXZlcnNhbC8iLCJzb3VyY2VzIjpbIm5ndC11bml2ZXJzYWwvZG9jdW1lbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXBEO0lBR0kseUJBQWlDLFVBQWU7UUFDNUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxTQUFTLEdBQUcsbUJBQUEsbUJBQVU7Z0JBQ3ZCLGNBQWMsRUFBRSxVQUFDLEVBQVUsSUFBSyxPQUFBLElBQUksV0FBVyxFQUFFLEVBQWpCLENBQWlCO2dCQUNqRCxzQkFBc0IsRUFBRSxVQUFDLFNBQWlCLElBQUssT0FBQSxJQUFJLGNBQWMsRUFBRSxFQUFwQixDQUFvQjtnQkFDbkUsaUJBQWlCLEVBQUUsVUFBQyxJQUFZLElBQUssT0FBQSxJQUFJLFFBQVEsRUFBRSxFQUFkLENBQWM7Z0JBQ25ELG9CQUFvQixFQUFFLFVBQUMsSUFBWSxJQUFLLE9BQUEsSUFBSSxRQUFRLEVBQUUsRUFBZCxDQUFjO2FBQ3pELEVBQUEsRUFBWSxDQUFDO1NBQ2pCO2FBQU07WUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7WUFDOUMsNkJBQTZCO1lBQzdCLElBQUksQ0FBQyxTQUFTLEdBQUcsbUJBQUEsRUFBRSxFQUFZLENBQUM7U0FDbkM7SUFDTCxDQUFDO0lBRUQsc0JBQUksMkNBQWM7Ozs7UUFBbEI7WUFDSSxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDNUIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQzFCLENBQUM7OztPQUFBOztnQkF0QkosVUFBVTs7OztnREFHTSxNQUFNLFNBQUMsV0FBVzs7SUFvQm5DLHNCQUFDO0NBQUEsQUF2QkQsSUF1QkM7U0F0QlksZUFBZTs7O0lBQ3hCLG9DQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERvY3VtZW50U2VydmljZSB7XG4gICAgcHJpdmF0ZSBfZG9jdW1lbnQ6IERvY3VtZW50O1xuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtSWQ6IGFueSkge1xuICAgICAgICBpZiAoIWlzUGxhdGZvcm1Ccm93c2VyKHBsYXRmb3JtSWQpKSB7XG4gICAgICAgICAgICB0aGlzLl9kb2N1bWVudCA9IDx1bmtub3duPiB7XG4gICAgICAgICAgICAgICAgZ2V0RWxlbWVudEJ5SWQ6IChpZDogc3RyaW5nKSA9PiBuZXcgSFRNTEVsZW1lbnQoKSxcbiAgICAgICAgICAgICAgICBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lOiAoY2xhc3NOYW1lOiBzdHJpbmcpID0+IG5ldyBIVE1MQ29sbGVjdGlvbigpLFxuICAgICAgICAgICAgICAgIGdldEVsZW1lbnRzQnlOYW1lOiAobmFtZTogc3RyaW5nKSA9PiBuZXcgTm9kZUxpc3QoKSxcbiAgICAgICAgICAgICAgICBnZXRFbGVtZW50c0J5VGFnTmFtZTogKG5hbWU6IHN0cmluZykgPT4gbmV3IE5vZGVMaXN0KClcbiAgICAgICAgICAgIH0gYXMgRG9jdW1lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnaW4gYnJvd3NlciwgYXNzaWduaW5nIGRvY3VtZW50Jyk7XG4gICAgICAgICAgICAvLyB0aGlzLl9kb2N1bWVudCA9IGRvY3VtZW50O1xuICAgICAgICAgICAgdGhpcy5fZG9jdW1lbnQgPSB7fSBhcyBEb2N1bWVudDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBuYXRpdmVEb2N1bWVudCgpOiBEb2N1bWVudCB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdnZXQgbmF0aXZlIGRvY3VtZW50Jyk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuX2RvY3VtZW50KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RvY3VtZW50O1xuICAgIH1cbn1cbiJdfQ==