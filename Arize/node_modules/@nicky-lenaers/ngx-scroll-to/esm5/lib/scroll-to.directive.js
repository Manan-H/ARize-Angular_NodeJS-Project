/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ElementRef, Renderer2 } from '@angular/core';
import { DEFAULTS, EVENTS } from './scroll-to-helpers';
import { ScrollToService } from './scroll-to.service';
/* tslint:disable */
var ScrollToDirective = /** @class */ (function () {
    function ScrollToDirective(_elementRef, _scrollToService, _renderer2) {
        this._elementRef = _elementRef;
        this._scrollToService = _scrollToService;
        this._renderer2 = _renderer2;
        this.ngxScrollTo = DEFAULTS.target;
        this.ngxScrollToEvent = DEFAULTS.action;
        this.ngxScrollToDuration = DEFAULTS.duration;
        this.ngxScrollToEasing = DEFAULTS.easing;
        this.ngxScrollToOffset = DEFAULTS.offset;
        this.ngxScrollToOffsetMap = DEFAULTS.offsetMap;
    }
    /**
     * Angular Lifecycle Hook - After View Init
     *
     * @todo Implement Subscription for Events
     *
     * @returns void
     */
    /**
     * Angular Lifecycle Hook - After View Init
     *
     * \@todo Implement Subscription for Events
     *
     * @return {?} void
     */
    ScrollToDirective.prototype.ngAfterViewInit = /**
     * Angular Lifecycle Hook - After View Init
     *
     * \@todo Implement Subscription for Events
     *
     * @return {?} void
     */
    function () {
        var _this = this;
        // Test Event Support
        if (EVENTS.indexOf(this.ngxScrollToEvent) === -1)
            throw new Error("Unsupported Event '" + this.ngxScrollToEvent + "'");
        // Listen for the trigger...
        this._renderer2.listen(this._elementRef.nativeElement, this.ngxScrollToEvent, function (event) {
            _this._options = {
                target: _this.ngxScrollTo,
                duration: _this.ngxScrollToDuration,
                easing: _this.ngxScrollToEasing,
                offset: _this.ngxScrollToOffset,
                offsetMap: _this.ngxScrollToOffsetMap
            };
            _this._scrollToService.scrollTo(_this._options);
        });
    };
    ScrollToDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngx-scroll-to]'
                },] }
    ];
    /** @nocollapse */
    ScrollToDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ScrollToService },
        { type: Renderer2 }
    ]; };
    ScrollToDirective.propDecorators = {
        ngxScrollTo: [{ type: Input, args: ['ngx-scroll-to',] }],
        ngxScrollToEvent: [{ type: Input, args: ['ngx-scroll-to-event',] }],
        ngxScrollToDuration: [{ type: Input, args: ['ngx-scroll-to-duration',] }],
        ngxScrollToEasing: [{ type: Input, args: ['ngx-scroll-to-easing',] }],
        ngxScrollToOffset: [{ type: Input, args: ['ngx-scroll-to-offset',] }],
        ngxScrollToOffsetMap: [{ type: Input, args: ['ngx-scroll-to-offset-map',] }]
    };
    return ScrollToDirective;
}());
export { ScrollToDirective };
if (false) {
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollTo;
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollToEvent;
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollToDuration;
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollToEasing;
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollToOffset;
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollToOffsetMap;
    /**
     * @type {?}
     * @private
     */
    ScrollToDirective.prototype._options;
    /**
     * @type {?}
     * @private
     */
    ScrollToDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    ScrollToDirective.prototype._scrollToService;
    /**
     * @type {?}
     * @private
     */
    ScrollToDirective.prototype._renderer2;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXRvLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuaWNreS1sZW5hZXJzL25neC1zY3JvbGwtdG8vIiwic291cmNlcyI6WyJsaWIvc2Nyb2xsLXRvLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsVUFBVSxFQUNWLFNBQVMsRUFFVixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQ0wsUUFBUSxFQUNSLE1BQU0sRUFDUCxNQUFNLHFCQUFxQixDQUFDO0FBVTdCLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7QUFHdEQ7SUF5QkUsMkJBQ1UsV0FBdUIsRUFDdkIsZ0JBQWlDLEVBQ2pDLFVBQXFCO1FBRnJCLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBQ3ZCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBaUI7UUFDakMsZUFBVSxHQUFWLFVBQVUsQ0FBVztRQXRCeEIsZ0JBQVcsR0FBbUIsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUc5QyxxQkFBZ0IsR0FBa0IsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUdsRCx3QkFBbUIsR0FBVyxRQUFRLENBQUMsUUFBUSxDQUFDO1FBR2hELHNCQUFpQixHQUE0QixRQUFRLENBQUMsTUFBTSxDQUFDO1FBRzdELHNCQUFpQixHQUFXLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFHNUMseUJBQW9CLEdBQXNCLFFBQVEsQ0FBQyxTQUFTLENBQUM7SUFPakMsQ0FBQztJQUVwQzs7Ozs7O09BTUc7Ozs7Ozs7O0lBQ0ksMkNBQWU7Ozs7Ozs7SUFBdEI7UUFBQSxpQkFtQkM7UUFqQkMscUJBQXFCO1FBQ3JCLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUFzQixJQUFJLENBQUMsZ0JBQWdCLE1BQUcsQ0FBQyxDQUFDO1FBRWxILDRCQUE0QjtRQUM1QixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQzFFLFVBQUMsS0FBWTtZQUVYLEtBQUksQ0FBQyxRQUFRLEdBQUc7Z0JBQ2QsTUFBTSxFQUFFLEtBQUksQ0FBQyxXQUFXO2dCQUN4QixRQUFRLEVBQUUsS0FBSSxDQUFDLG1CQUFtQjtnQkFDbEMsTUFBTSxFQUFFLEtBQUksQ0FBQyxpQkFBaUI7Z0JBQzlCLE1BQU0sRUFBRSxLQUFJLENBQUMsaUJBQWlCO2dCQUM5QixTQUFTLEVBQUUsS0FBSSxDQUFDLG9CQUFvQjthQUNyQyxDQUFDO1lBRUYsS0FBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOztnQkF4REYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxpQkFBaUI7aUJBQzVCOzs7O2dCQXZCQyxVQUFVO2dCQWtCSCxlQUFlO2dCQWpCdEIsU0FBUzs7OzhCQXlCUixLQUFLLFNBQUMsZUFBZTttQ0FHckIsS0FBSyxTQUFDLHFCQUFxQjtzQ0FHM0IsS0FBSyxTQUFDLHdCQUF3QjtvQ0FHOUIsS0FBSyxTQUFDLHNCQUFzQjtvQ0FHNUIsS0FBSyxTQUFDLHNCQUFzQjt1Q0FHNUIsS0FBSyxTQUFDLDBCQUEwQjs7SUFxQ25DLHdCQUFDO0NBQUEsQUF6REQsSUF5REM7U0F0RFksaUJBQWlCOzs7SUFFNUIsd0NBQ3FEOztJQUVyRCw2Q0FDeUQ7O0lBRXpELGdEQUN1RDs7SUFFdkQsOENBQ29FOztJQUVwRSw4Q0FDbUQ7O0lBRW5ELGlEQUNvRTs7Ozs7SUFFcEUscUNBQXdDOzs7OztJQUd0Qyx3Q0FBK0I7Ozs7O0lBQy9CLDZDQUF5Qzs7Ozs7SUFDekMsdUNBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgSW5wdXQsXHJcbiAgRWxlbWVudFJlZixcclxuICBSZW5kZXJlcjIsXHJcbiAgQWZ0ZXJWaWV3SW5pdFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHtcclxuICBERUZBVUxUUyxcclxuICBFVkVOVFNcclxufSBmcm9tICcuL3Njcm9sbC10by1oZWxwZXJzJztcclxuaW1wb3J0IHtcclxuICBTY3JvbGxUb0NvbmZpZ09wdGlvbnMsXHJcbiAgU2Nyb2xsVG9PZmZzZXRNYXAsXHJcbiAgU2Nyb2xsVG9UYXJnZXRcclxufSBmcm9tICcuL3Njcm9sbC10by1jb25maWcuaW50ZXJmYWNlJztcclxuaW1wb3J0IHtcclxuICBTY3JvbGxUb0FuaW1hdGlvbkVhc2luZ1xyXG59IGZyb20gJy4vc2Nyb2xsLXRvLWVhc2luZy5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBTY3JvbGxUb0V2ZW50IH0gZnJvbSAnLi9zY3JvbGwtdG8tZXZlbnQuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgU2Nyb2xsVG9TZXJ2aWNlIH0gZnJvbSAnLi9zY3JvbGwtdG8uc2VydmljZSc7XHJcblxyXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tuZ3gtc2Nyb2xsLXRvXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFNjcm9sbFRvRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XHJcblxyXG4gIEBJbnB1dCgnbmd4LXNjcm9sbC10bycpXHJcbiAgcHVibGljIG5neFNjcm9sbFRvOiBTY3JvbGxUb1RhcmdldCA9IERFRkFVTFRTLnRhcmdldDtcclxuXHJcbiAgQElucHV0KCduZ3gtc2Nyb2xsLXRvLWV2ZW50JylcclxuICBwdWJsaWMgbmd4U2Nyb2xsVG9FdmVudDogU2Nyb2xsVG9FdmVudCA9IERFRkFVTFRTLmFjdGlvbjtcclxuXHJcbiAgQElucHV0KCduZ3gtc2Nyb2xsLXRvLWR1cmF0aW9uJylcclxuICBwdWJsaWMgbmd4U2Nyb2xsVG9EdXJhdGlvbjogbnVtYmVyID0gREVGQVVMVFMuZHVyYXRpb247XHJcblxyXG4gIEBJbnB1dCgnbmd4LXNjcm9sbC10by1lYXNpbmcnKVxyXG4gIHB1YmxpYyBuZ3hTY3JvbGxUb0Vhc2luZzogU2Nyb2xsVG9BbmltYXRpb25FYXNpbmcgPSBERUZBVUxUUy5lYXNpbmc7XHJcblxyXG4gIEBJbnB1dCgnbmd4LXNjcm9sbC10by1vZmZzZXQnKVxyXG4gIHB1YmxpYyBuZ3hTY3JvbGxUb09mZnNldDogbnVtYmVyID0gREVGQVVMVFMub2Zmc2V0O1xyXG5cclxuICBASW5wdXQoJ25neC1zY3JvbGwtdG8tb2Zmc2V0LW1hcCcpXHJcbiAgcHVibGljIG5neFNjcm9sbFRvT2Zmc2V0TWFwOiBTY3JvbGxUb09mZnNldE1hcCA9IERFRkFVTFRTLm9mZnNldE1hcDtcclxuXHJcbiAgcHJpdmF0ZSBfb3B0aW9uczogU2Nyb2xsVG9Db25maWdPcHRpb25zO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXHJcbiAgICBwcml2YXRlIF9zY3JvbGxUb1NlcnZpY2U6IFNjcm9sbFRvU2VydmljZSxcclxuICAgIHByaXZhdGUgX3JlbmRlcmVyMjogUmVuZGVyZXIyKSB7IH1cclxuXHJcbiAgLyoqXHJcbiAgICogQW5ndWxhciBMaWZlY3ljbGUgSG9vayAtIEFmdGVyIFZpZXcgSW5pdFxyXG4gICAqXHJcbiAgICogQHRvZG8gSW1wbGVtZW50IFN1YnNjcmlwdGlvbiBmb3IgRXZlbnRzXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB2b2lkXHJcbiAgICovXHJcbiAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuXHJcbiAgICAvLyBUZXN0IEV2ZW50IFN1cHBvcnRcclxuICAgIGlmIChFVkVOVFMuaW5kZXhPZih0aGlzLm5neFNjcm9sbFRvRXZlbnQpID09PSAtMSkgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBFdmVudCAnJHt0aGlzLm5neFNjcm9sbFRvRXZlbnR9J2ApO1xyXG5cclxuICAgIC8vIExpc3RlbiBmb3IgdGhlIHRyaWdnZXIuLi5cclxuICAgIHRoaXMuX3JlbmRlcmVyMi5saXN0ZW4odGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCB0aGlzLm5neFNjcm9sbFRvRXZlbnQsXHJcbiAgICAgIChldmVudDogRXZlbnQpID0+IHtcclxuXHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHtcclxuICAgICAgICAgIHRhcmdldDogdGhpcy5uZ3hTY3JvbGxUbyxcclxuICAgICAgICAgIGR1cmF0aW9uOiB0aGlzLm5neFNjcm9sbFRvRHVyYXRpb24sXHJcbiAgICAgICAgICBlYXNpbmc6IHRoaXMubmd4U2Nyb2xsVG9FYXNpbmcsXHJcbiAgICAgICAgICBvZmZzZXQ6IHRoaXMubmd4U2Nyb2xsVG9PZmZzZXQsXHJcbiAgICAgICAgICBvZmZzZXRNYXA6IHRoaXMubmd4U2Nyb2xsVG9PZmZzZXRNYXBcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLl9zY3JvbGxUb1NlcnZpY2Uuc2Nyb2xsVG8odGhpcy5fb3B0aW9ucyk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=