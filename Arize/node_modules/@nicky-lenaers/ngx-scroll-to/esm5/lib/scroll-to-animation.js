/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ReplaySubject } from 'rxjs/index';
import { EASING } from './scroll-to-helpers';
/**
 * Scroll To Animation
 */
var /**
 * Scroll To Animation
 */
ScrollToAnimation = /** @class */ (function () {
    /**
     * Class Constructor.
     *
     * @param _container            The Container
     * @param _listenerTarget       The Element that listens for DOM Events
     * @param _isWindow             Whether or not the listener is the Window
     * @param _to                   Position to scroll to
     * @param _options              Additional options for scrolling
     * @param _isBrowser            Whether or not execution runs in the browser
     *                              (as opposed to the server)
     */
    function ScrollToAnimation(_container, _listenerTarget, _isWindow, _to, _options, _isBrowser) {
        var _this = this;
        this._container = _container;
        this._listenerTarget = _listenerTarget;
        this._isWindow = _isWindow;
        this._to = _to;
        this._options = _options;
        this._isBrowser = _isBrowser;
        /**
         * Recursively loop over the Scroll Animation
         */
        this._loop = function () {
            _this._timeLapsed += _this._tick;
            _this._percentage = (_this._timeLapsed / _this._options.duration);
            _this._percentage = (_this._percentage > 1) ? 1 : _this._percentage;
            // Position Update
            _this._position = _this._startPosition +
                ((_this._startPosition - _this._to <= 0 ? 1 : -1) *
                    _this._distance *
                    EASING[_this._options.easing](_this._percentage));
            if (_this._lastPosition !== null && _this._position === _this._lastPosition) {
                _this.stop();
            }
            else {
                _this._source$.next(_this._position);
                _this._isWindow
                    ? _this._listenerTarget.scrollTo(0, Math.floor(_this._position))
                    : _this._container.scrollTop = Math.floor(_this._position);
                _this._lastPosition = _this._position;
            }
        };
        this._tick = 16;
        this._interval = null;
        this._lastPosition = null;
        this._timeLapsed = 0;
        this._windowScrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
        if (!this._container) {
            this._startPosition = this._windowScrollTop;
        }
        else {
            this._startPosition = this._isWindow ? this._windowScrollTop : this._container.scrollTop;
        }
        // Correction for Starting Position of nested HTML Elements
        if (this._container && !this._isWindow) {
            this._to = this._to - this._container.getBoundingClientRect().top + this._startPosition;
        }
        // Set Distance
        /** @type {?} */
        var directionalDistance = this._startPosition - this._to;
        this._distance = this._container ? Math.abs(this._startPosition - this._to) : this._to;
        this._mappedOffset = this._options.offset;
        // Set offset from Offset Map
        if (this._isBrowser) {
            this._options
                .offsetMap
                .forEach(function (value, key) { return _this._mappedOffset = window.innerWidth > key ? value : _this._mappedOffset; });
        }
        this._distance += this._mappedOffset * (directionalDistance <= 0 ? 1 : -1);
        this._source$ = new ReplaySubject();
    }
    /**
     * Start the new Scroll Animation.
     *
     * @returns         Observable containing a number
     */
    /**
     * Start the new Scroll Animation.
     *
     * @return {?} Observable containing a number
     */
    ScrollToAnimation.prototype.start = /**
     * Start the new Scroll Animation.
     *
     * @return {?} Observable containing a number
     */
    function () {
        clearInterval(this._interval);
        this._interval = setInterval(this._loop, this._tick);
        return this._source$.asObservable();
    };
    /**
     * Stop the current Scroll Animation Loop.
     *
     * @param force 			    Force to stop the Animation Loop
     * @returns               Void
     */
    /**
     * Stop the current Scroll Animation Loop.
     *
     * @return {?} Void
     */
    ScrollToAnimation.prototype.stop = /**
     * Stop the current Scroll Animation Loop.
     *
     * @return {?} Void
     */
    function () {
        clearInterval(this._interval);
        this._interval = null;
        this._source$.complete();
    };
    return ScrollToAnimation;
}());
/**
 * Scroll To Animation
 */
export { ScrollToAnimation };
if (false) {
    /**
     * Number of milliseconds for each Tick
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._tick;
    /**
     * Interval
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._interval;
    /**
     * Time Lapsed in milliseconds
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._timeLapsed;
    /**
     * Percentage of time lapsed
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._percentage;
    /**
     * Position of the Element
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._position;
    /**
     * Last Element Position
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._lastPosition;
    /**
     * Start Position of the Element
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._startPosition;
    /**
     * The Distance to scroll
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._distance;
    /**
     * Observable Source
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._source$;
    /**
     * Scroll Top of the Window
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._windowScrollTop;
    /**
     * Mapped Offset taken from the active Offset Map
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._mappedOffset;
    /**
     * Recursively loop over the Scroll Animation
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._loop;
    /**
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._container;
    /**
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._listenerTarget;
    /**
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._isWindow;
    /**
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._to;
    /**
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._options;
    /**
     * @type {?}
     * @private
     */
    ScrollToAnimation.prototype._isBrowser;
}
//# sourceMappingURL=data:application/json;base64,