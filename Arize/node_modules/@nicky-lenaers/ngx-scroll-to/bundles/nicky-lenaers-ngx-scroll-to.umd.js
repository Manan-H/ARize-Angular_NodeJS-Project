(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('rxjs/index'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@nicky-lenaers/ngx-scroll-to', ['exports', '@angular/common', 'rxjs/index', '@angular/core'], factory) :
    (factory((global['nicky-lenaers'] = global['nicky-lenaers'] || {}, global['nicky-lenaers']['ngx-scroll-to'] = {}),global.ng.common,global.rxjs.index,global.ng.core));
}(this, (function (exports,common,index,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Default values for Component Input
     * @type {?}
     */
    var DEFAULTS = {
        target: null,
        action: 'click',
        duration: 650,
        easing: 'easeInOutQuad',
        offset: 0,
        offsetMap: new Map()
    };
    /**
     * Easing Colleciton
     * @type {?}
     */
    var EASING = {
        easeInQuad: function (time) {
            return time * time;
        },
        easeOutQuad: function (time) {
            return time * (2 - time);
        },
        easeInOutQuad: function (time) {
            return time < 0.5 ? 2 * time * time : -1 + (4 - 2 * time) * time;
        },
        easeInCubic: function (time) {
            return time * time * time;
        },
        easeOutCubic: function (time) {
            return (--time) * time * time + 1;
        },
        easeInOutCubic: function (time) {
            return time < 0.5 ? 4 * time * time * time : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1;
        },
        easeInQuart: function (time) {
            return time * time * time * time;
        },
        easeOutQuart: function (time) {
            return 1 - (--time) * time * time * time;
        },
        easeInOutQuart: function (time) {
            return time < 0.5 ? 8 * time * time * time * time : 1 - 8 * (--time) * time * time * time;
        },
        easeInQuint: function (time) {
            return time * time * time * time * time;
        },
        easeOutQuint: function (time) {
            return 1 + (--time) * time * time * time * time;
        },
        easeInOutQuint: function (time) {
            return time < 0.5 ? 16 * time * time * time * time * time : 1 + 16 * (--time) * time * time * time * time;
        },
        easeOutElastic: function (time) {
            return Math.pow(2, -10 * time) * Math.sin((time - 1 / 4) * (2 * Math.PI) / 1) + 1;
        }
    };
    /**
     * Set of allowed events as triggers
     * for the Animation to start.
     * @type {?}
     */
    var EVENTS = [
        'click',
        'mouseenter',
        'mouseover',
        'mousedown',
        'mouseup',
        'dblclick',
        'contextmenu',
        'wheel',
        'mouseleave',
        'mouseout'
    ];
    /**
     * Strip hash (#) from value.
     *
     * @param {?} value 				The given string value
     * @return {?} 					The stripped string value
     */
    function stripHash(value) {
        return value.substring(0, 1) === '#' ? value.substring(1) : value;
    }
    /**
     * Test if a given value is a string.
     *
     * @param {?} value 					The given value
     * @return {?} 						Whether the given value is a string
     */
    function isString(value) {
        return typeof value === 'string' || value instanceof String;
    }
    /**
     * Test if a given Element is the Window.
     *
     * @param {?} container 				The given Element
     * @return {?} 						Whether the given Element is Window
     */
    function isWindow(container) {
        return container === window;
    }
    /**
     * Test if a given value is of type ElementRef.
     *
     * @param {?} value 					The given value
     * @return {?} Whether the given value is a number
     */
    function isElementRef(value) {
        return value instanceof core.ElementRef;
    }
    /**
     * Whether or not the given value is a Native Element.
     *
     * @param {?} value           The given value
     * @return {?} Whether or not the value is a Native Element
     */
    function isNativeElement(value) {
        return value instanceof HTMLElement;
    }
    /**
     * Test if a given value is type number.
     *
     * @param {?} value 					The given value
     * @return {?} 						Whether the given value is a number
     */
    function isNumber(value) {
        return !isNaN(parseFloat(value)) && isFinite(value);
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Scroll To Animation
     */
    var /**
     * Scroll To Animation
     */ ScrollToAnimation = /** @class */ (function () {
        /**
         * Class Constructor.
         *
         * @param _container            The Container
         * @param _listenerTarget       The Element that listens for DOM Events
         * @param _isWindow             Whether or not the listener is the Window
         * @param _to                   Position to scroll to
         * @param _options              Additional options for scrolling
         * @param _isBrowser            Whether or not execution runs in the browser
         *                              (as opposed to the server)
         */
        function ScrollToAnimation(_container, _listenerTarget, _isWindow, _to, _options, _isBrowser) {
            var _this = this;
            this._container = _container;
            this._listenerTarget = _listenerTarget;
            this._isWindow = _isWindow;
            this._to = _to;
            this._options = _options;
            this._isBrowser = _isBrowser;
            /**
             * Recursively loop over the Scroll Animation
             */
            this._loop = function () {
                _this._timeLapsed += _this._tick;
                _this._percentage = (_this._timeLapsed / _this._options.duration);
                _this._percentage = (_this._percentage > 1) ? 1 : _this._percentage;
                // Position Update
                _this._position = _this._startPosition +
                    ((_this._startPosition - _this._to <= 0 ? 1 : -1) *
                        _this._distance *
                        EASING[_this._options.easing](_this._percentage));
                if (_this._lastPosition !== null && _this._position === _this._lastPosition) {
                    _this.stop();
                }
                else {
                    _this._source$.next(_this._position);
                    _this._isWindow
                        ? _this._listenerTarget.scrollTo(0, Math.floor(_this._position))
                        : _this._container.scrollTop = Math.floor(_this._position);
                    _this._lastPosition = _this._position;
                }
            };
            this._tick = 16;
            this._interval = null;
            this._lastPosition = null;
            this._timeLapsed = 0;
            this._windowScrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
            if (!this._container) {
                this._startPosition = this._windowScrollTop;
            }
            else {
                this._startPosition = this._isWindow ? this._windowScrollTop : this._container.scrollTop;
            }
            // Correction for Starting Position of nested HTML Elements
            if (this._container && !this._isWindow) {
                this._to = this._to - this._container.getBoundingClientRect().top + this._startPosition;
            }
            // Set Distance
            /** @type {?} */
            var directionalDistance = this._startPosition - this._to;
            this._distance = this._container ? Math.abs(this._startPosition - this._to) : this._to;
            this._mappedOffset = this._options.offset;
            // Set offset from Offset Map
            if (this._isBrowser) {
                this._options
                    .offsetMap
                    .forEach(function (value, key) { return _this._mappedOffset = window.innerWidth > key ? value : _this._mappedOffset; });
            }
            this._distance += this._mappedOffset * (directionalDistance <= 0 ? 1 : -1);
            this._source$ = new index.ReplaySubject();
        }
        /**
         * Start the new Scroll Animation.
         *
         * @returns         Observable containing a number
         */
        /**
         * Start the new Scroll Animation.
         *
         * @return {?} Observable containing a number
         */
        ScrollToAnimation.prototype.start = /**
         * Start the new Scroll Animation.
         *
         * @return {?} Observable containing a number
         */
            function () {
                clearInterval(this._interval);
                this._interval = setInterval(this._loop, this._tick);
                return this._source$.asObservable();
            };
        /**
         * Stop the current Scroll Animation Loop.
         *
         * @param force 			    Force to stop the Animation Loop
         * @returns               Void
         */
        /**
         * Stop the current Scroll Animation Loop.
         *
         * @return {?} Void
         */
        ScrollToAnimation.prototype.stop = /**
         * Stop the current Scroll Animation Loop.
         *
         * @return {?} Void
         */
            function () {
                clearInterval(this._interval);
                this._interval = null;
                this._source$.complete();
            };
        return ScrollToAnimation;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * The Scroll To Service handles starting, interrupting
     * and ending the actual Scroll Animation. It provides
     * some utilities to find the proper HTML Element on a
     * given page to setup Event Listeners and calculate
     * distances for the Animation.
     */
    var ScrollToService = /** @class */ (function () {
        /**
         * Construct and setup required paratemeters.
         *
         * @param _document         A Reference to the Document
         * @param _platformId       Angular Platform ID
         */
        function ScrollToService(_document, _platformId) {
            this._document = _document;
            this._platformId = _platformId;
            this._interruptiveEvents = ['mousewheel', 'DOMMouseScroll', 'touchstart'];
        }
        /**
         * Target an Element to scroll to. Notice that the `TimeOut` decorator
         * ensures the executing to take place in the next Angular lifecycle.
         * This allows for scrolling to elements that are e.g. initially hidden
         * by means of `*ngIf`, but ought to be scrolled to eventually.
         *
         * @todo type 'any' in Observable should become custom type like 'ScrollToEvent' (base class), see issue comment:
         * 	- https://github.com/nicky-lenaers/ngx-scroll-to/issues/10#issuecomment-317198481
         *
         * @param options         Configuration Object
         * @returns               Observable
         */
        /**
         * Target an Element to scroll to. Notice that the `TimeOut` decorator
         * ensures the executing to take place in the next Angular lifecycle.
         * This allows for scrolling to elements that are e.g. initially hidden
         * by means of `*ngIf`, but ought to be scrolled to eventually.
         *
         * \@todo type 'any' in Observable should become custom type like 'ScrollToEvent' (base class), see issue comment:
         * 	- https://github.com/nicky-lenaers/ngx-scroll-to/issues/10#issuecomment-317198481
         *
         * @param {?} options         Configuration Object
         * @return {?} Observable
         */
        ScrollToService.prototype.scrollTo = /**
         * Target an Element to scroll to. Notice that the `TimeOut` decorator
         * ensures the executing to take place in the next Angular lifecycle.
         * This allows for scrolling to elements that are e.g. initially hidden
         * by means of `*ngIf`, but ought to be scrolled to eventually.
         *
         * \@todo type 'any' in Observable should become custom type like 'ScrollToEvent' (base class), see issue comment:
         * 	- https://github.com/nicky-lenaers/ngx-scroll-to/issues/10#issuecomment-317198481
         *
         * @param {?} options         Configuration Object
         * @return {?} Observable
         */
            function (options) {
                if (!common.isPlatformBrowser(this._platformId))
                    return new index.ReplaySubject().asObservable();
                return this._start(options);
            };
        /**
         * Start a new Animation.
         *
         * @todo Emit proper events from subscription
         *
         * @param options         Configuration Object
         * @returns               Observable
         */
        /**
         * Start a new Animation.
         *
         * \@todo Emit proper events from subscription
         *
         * @private
         * @param {?} options         Configuration Object
         * @return {?} Observable
         */
        ScrollToService.prototype._start = /**
         * Start a new Animation.
         *
         * \@todo Emit proper events from subscription
         *
         * @private
         * @param {?} options         Configuration Object
         * @return {?} Observable
         */
            function (options) {
                var _this = this;
                // Merge config with default values
                /** @type {?} */
                var mergedConfigOptions = ( /** @type {?} */(__assign({}, ( /** @type {?} */(DEFAULTS)), options)));
                if (this._animation)
                    this._animation.stop();
                /** @type {?} */
                var targetNode = this._getNode(mergedConfigOptions.target);
                if (mergedConfigOptions.target && !targetNode)
                    return index.throwError('Unable to find Target Element');
                /** @type {?} */
                var container = this._getContainer(mergedConfigOptions, targetNode);
                if (mergedConfigOptions.container && !container)
                    return index.throwError('Unable to find Container Element');
                /** @type {?} */
                var listenerTarget = this._getListenerTarget(container) || window;
                /** @type {?} */
                var to = container ? container.getBoundingClientRect().top : 0;
                if (targetNode) {
                    to = isWindow(listenerTarget) ? targetNode.offsetTop : targetNode.getBoundingClientRect().top;
                }
                // Create Animation
                this._animation = new ScrollToAnimation(container, listenerTarget, isWindow(listenerTarget), to, mergedConfigOptions, common.isPlatformBrowser(this._platformId));
                /** @type {?} */
                var onInterrupt = function () { return _this._animation.stop(); };
                this._addInterruptiveEventListeners(listenerTarget, onInterrupt);
                // Start Animation
                /** @type {?} */
                var animation$ = this._animation.start();
                this._subscribeToAnimation(animation$, listenerTarget, onInterrupt);
                return animation$;
            };
        /**
         * Subscribe to the events emitted from the Scrolling
         * Animation. Events might be used for e.g. unsubscribing
         * once finished.
         *
         * @param animation$              The Animation Observable
         * @param listenerTarget          The Listener Target for events
         * @param onInterrupt             The handler for Interruptive Events
         * @returns                       Void
         */
        /**
         * Subscribe to the events emitted from the Scrolling
         * Animation. Events might be used for e.g. unsubscribing
         * once finished.
         *
         * @private
         * @param {?} animation$              The Animation Observable
         * @param {?} listenerTarget          The Listener Target for events
         * @param {?} onInterrupt             The handler for Interruptive Events
         * @return {?} Void
         */
        ScrollToService.prototype._subscribeToAnimation = /**
         * Subscribe to the events emitted from the Scrolling
         * Animation. Events might be used for e.g. unsubscribing
         * once finished.
         *
         * @private
         * @param {?} animation$              The Animation Observable
         * @param {?} listenerTarget          The Listener Target for events
         * @param {?} onInterrupt             The handler for Interruptive Events
         * @return {?} Void
         */
            function (animation$, listenerTarget, onInterrupt) {
                var _this = this;
                /** @type {?} */
                var subscription = animation$
                    .subscribe(function () { }, function () { }, function () {
                    _this._removeInterruptiveEventListeners(_this._interruptiveEvents, listenerTarget, onInterrupt);
                    subscription.unsubscribe();
                });
            };
        /**
         * Get the container HTML Element in which
         * the scrolling should happen.
         *
         * @param options         The Merged Configuration Object
         * @param targetNode    the targeted HTMLElement
         * @returns
         */
        /**
         * Get the container HTML Element in which
         * the scrolling should happen.
         *
         * @private
         * @param {?} options         The Merged Configuration Object
         * @param {?} targetNode    the targeted HTMLElement
         * @return {?}
         */
        ScrollToService.prototype._getContainer = /**
         * Get the container HTML Element in which
         * the scrolling should happen.
         *
         * @private
         * @param {?} options         The Merged Configuration Object
         * @param {?} targetNode    the targeted HTMLElement
         * @return {?}
         */
            function (options, targetNode) {
                /** @type {?} */
                var container = null;
                if (options.container) {
                    container = this._getNode(options.container, true);
                }
                else if (targetNode) {
                    container = this._getFirstScrollableParent(targetNode);
                }
                return container;
            };
        /**
         * Add listeners for the Animation Interruptive Events
         * to the Listener Target.
         *
         * @param events            List of events to listen to
         * @param listenerTarget    Target to attach the listener on
         * @param handler           Handler for when the listener fires
         * @returns                 Void
         */
        /**
         * Add listeners for the Animation Interruptive Events
         * to the Listener Target.
         *
         * @private
         * @param {?} listenerTarget    Target to attach the listener on
         * @param {?} handler           Handler for when the listener fires
         * @return {?} Void
         */
        ScrollToService.prototype._addInterruptiveEventListeners = /**
         * Add listeners for the Animation Interruptive Events
         * to the Listener Target.
         *
         * @private
         * @param {?} listenerTarget    Target to attach the listener on
         * @param {?} handler           Handler for when the listener fires
         * @return {?} Void
         */
            function (listenerTarget, handler) {
                var _this = this;
                if (!listenerTarget)
                    listenerTarget = window;
                this._interruptiveEvents
                    .forEach(function (event) {
                    return listenerTarget
                        .addEventListener(event, handler, _this._supportPassive() ? { passive: true } : false);
                });
            };
        /**
         * Feature-detect support for passive event listeners.
         *
         * @returns       Whether or not passive event listeners are supported
         */
        /**
         * Feature-detect support for passive event listeners.
         *
         * @private
         * @return {?} Whether or not passive event listeners are supported
         */
        ScrollToService.prototype._supportPassive = /**
         * Feature-detect support for passive event listeners.
         *
         * @private
         * @return {?} Whether or not passive event listeners are supported
         */
            function () {
                /** @type {?} */
                var supportsPassive = false;
                try {
                    /** @type {?} */
                    var opts = Object.defineProperty({}, 'passive', {
                        get: function () {
                            supportsPassive = true;
                        }
                    });
                    window.addEventListener('testPassive', null, opts);
                    window.removeEventListener('testPassive', null, opts);
                }
                catch (e) { }
                return supportsPassive;
            };
        /**
         * Remove listeners for the Animation Interrupt Event from
         * the Listener Target. Specifying the correct handler prevents
         * memory leaks and makes the allocated memory available for
         * Garbage Collection.
         *
         * @param events            List of Interruptive Events to remove
         * @param listenerTarget    Target to attach the listener on
         * @param handler           Handler for when the listener fires
         * @returns                 Void
         */
        /**
         * Remove listeners for the Animation Interrupt Event from
         * the Listener Target. Specifying the correct handler prevents
         * memory leaks and makes the allocated memory available for
         * Garbage Collection.
         *
         * @private
         * @param {?} events            List of Interruptive Events to remove
         * @param {?} listenerTarget    Target to attach the listener on
         * @param {?} handler           Handler for when the listener fires
         * @return {?} Void
         */
        ScrollToService.prototype._removeInterruptiveEventListeners = /**
         * Remove listeners for the Animation Interrupt Event from
         * the Listener Target. Specifying the correct handler prevents
         * memory leaks and makes the allocated memory available for
         * Garbage Collection.
         *
         * @private
         * @param {?} events            List of Interruptive Events to remove
         * @param {?} listenerTarget    Target to attach the listener on
         * @param {?} handler           Handler for when the listener fires
         * @return {?} Void
         */
            function (events, listenerTarget, handler) {
                if (!listenerTarget)
                    listenerTarget = window;
                events.forEach(function (event) { return listenerTarget.removeEventListener(event, handler); });
            };
        /**
         * Find the first scrollable parent Node of a given
         * Element. The DOM Tree gets searched upwards
         * to find this first scrollable parent. Parents might
         * be ignored by CSS styles applied to the HTML Element.
         *
         * @param nativeElement     The Element to search the DOM Tree upwards from
         * @returns                 The first scrollable parent HTML Element
         */
        /**
         * Find the first scrollable parent Node of a given
         * Element. The DOM Tree gets searched upwards
         * to find this first scrollable parent. Parents might
         * be ignored by CSS styles applied to the HTML Element.
         *
         * @private
         * @param {?} nativeElement     The Element to search the DOM Tree upwards from
         * @return {?} The first scrollable parent HTML Element
         */
        ScrollToService.prototype._getFirstScrollableParent = /**
         * Find the first scrollable parent Node of a given
         * Element. The DOM Tree gets searched upwards
         * to find this first scrollable parent. Parents might
         * be ignored by CSS styles applied to the HTML Element.
         *
         * @private
         * @param {?} nativeElement     The Element to search the DOM Tree upwards from
         * @return {?} The first scrollable parent HTML Element
         */
            function (nativeElement) {
                /** @type {?} */
                var style = window.getComputedStyle(nativeElement);
                /** @type {?} */
                var overflowRegex = /(auto|scroll|overlay)/;
                if (style.position === 'fixed')
                    return null;
                for (var parent_1 = nativeElement; parent_1 = parent_1.parentElement; null) {
                    style = window.getComputedStyle(parent_1);
                    if (style.position === 'absolute'
                        || style.overflow === 'hidden'
                        || style.overflowY === 'hidden')
                        continue;
                    if (overflowRegex.test(style.overflow + style.overflowY)
                        || parent_1.tagName === 'BODY')
                        return parent_1;
                }
                return null;
            };
        /**
         * Get the Target Node to scroll to.
         *
         * @param id              The given ID of the node, either a string or
         *                        an element reference
         * @param allowBodyTag    Indicate whether or not the Document Body is
         *                        considered a valid Target Node
         * @returns               The Target Node to scroll to
         */
        /**
         * Get the Target Node to scroll to.
         *
         * @private
         * @param {?} id              The given ID of the node, either a string or
         *                        an element reference
         * @param {?=} allowBodyTag    Indicate whether or not the Document Body is
         *                        considered a valid Target Node
         * @return {?} The Target Node to scroll to
         */
        ScrollToService.prototype._getNode = /**
         * Get the Target Node to scroll to.
         *
         * @private
         * @param {?} id              The given ID of the node, either a string or
         *                        an element reference
         * @param {?=} allowBodyTag    Indicate whether or not the Document Body is
         *                        considered a valid Target Node
         * @return {?} The Target Node to scroll to
         */
            function (id, allowBodyTag) {
                if (allowBodyTag === void 0) {
                    allowBodyTag = false;
                }
                /** @type {?} */
                var targetNode;
                if (isString(id)) {
                    if (allowBodyTag && (id === 'body' || id === 'BODY')) {
                        targetNode = this._document.body;
                    }
                    else {
                        targetNode = this._document.getElementById(stripHash(id));
                    }
                }
                else if (isNumber(id)) {
                    targetNode = this._document.getElementById(String(id));
                }
                else if (isElementRef(id)) {
                    targetNode = id.nativeElement;
                }
                else if (isNativeElement(id)) {
                    targetNode = id;
                }
                return targetNode;
            };
        /**
         * Retrieve the Listener target. This Listener Target is used
         * to attach Event Listeners on. In case of the target being
         * the Document Body, we need the actual `window` to listen
         * for events.
         *
         * @param container           The HTML Container element
         * @returns                   The Listener Target to attach events on
         */
        /**
         * Retrieve the Listener target. This Listener Target is used
         * to attach Event Listeners on. In case of the target being
         * the Document Body, we need the actual `window` to listen
         * for events.
         *
         * @private
         * @param {?} container           The HTML Container element
         * @return {?} The Listener Target to attach events on
         */
        ScrollToService.prototype._getListenerTarget = /**
         * Retrieve the Listener target. This Listener Target is used
         * to attach Event Listeners on. In case of the target being
         * the Document Body, we need the actual `window` to listen
         * for events.
         *
         * @private
         * @param {?} container           The HTML Container element
         * @return {?} The Listener Target to attach events on
         */
            function (container) {
                if (!container)
                    return null;
                return this._isDocumentBody(container) ? window : container;
            };
        /**
         * Test if a given HTML Element is the Document Body.
         *
         * @param element             The given HTML Element
         * @returns                   Whether or not the Element is the
         *                            Document Body Element
         */
        /**
         * Test if a given HTML Element is the Document Body.
         *
         * @private
         * @param {?} element             The given HTML Element
         * @return {?} Whether or not the Element is the
         *                            Document Body Element
         */
        ScrollToService.prototype._isDocumentBody = /**
         * Test if a given HTML Element is the Document Body.
         *
         * @private
         * @param {?} element             The given HTML Element
         * @return {?} Whether or not the Element is the
         *                            Document Body Element
         */
            function (element) {
                return element.tagName.toUpperCase() === 'BODY';
            };
        ScrollToService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ScrollToService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
                { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
            ];
        };
        return ScrollToService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /* tslint:disable */
    var ScrollToDirective = /** @class */ (function () {
        function ScrollToDirective(_elementRef, _scrollToService, _renderer2) {
            this._elementRef = _elementRef;
            this._scrollToService = _scrollToService;
            this._renderer2 = _renderer2;
            this.ngxScrollTo = DEFAULTS.target;
            this.ngxScrollToEvent = DEFAULTS.action;
            this.ngxScrollToDuration = DEFAULTS.duration;
            this.ngxScrollToEasing = DEFAULTS.easing;
            this.ngxScrollToOffset = DEFAULTS.offset;
            this.ngxScrollToOffsetMap = DEFAULTS.offsetMap;
        }
        /**
         * Angular Lifecycle Hook - After View Init
         *
         * @todo Implement Subscription for Events
         *
         * @returns void
         */
        /**
         * Angular Lifecycle Hook - After View Init
         *
         * \@todo Implement Subscription for Events
         *
         * @return {?} void
         */
        ScrollToDirective.prototype.ngAfterViewInit = /**
         * Angular Lifecycle Hook - After View Init
         *
         * \@todo Implement Subscription for Events
         *
         * @return {?} void
         */
            function () {
                var _this = this;
                // Test Event Support
                if (EVENTS.indexOf(this.ngxScrollToEvent) === -1)
                    throw new Error("Unsupported Event '" + this.ngxScrollToEvent + "'");
                // Listen for the trigger...
                this._renderer2.listen(this._elementRef.nativeElement, this.ngxScrollToEvent, function (event) {
                    _this._options = {
                        target: _this.ngxScrollTo,
                        duration: _this.ngxScrollToDuration,
                        easing: _this.ngxScrollToEasing,
                        offset: _this.ngxScrollToOffset,
                        offsetMap: _this.ngxScrollToOffsetMap
                    };
                    _this._scrollToService.scrollTo(_this._options);
                });
            };
        ScrollToDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ngx-scroll-to]'
                    },] }
        ];
        /** @nocollapse */
        ScrollToDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: ScrollToService },
                { type: core.Renderer2 }
            ];
        };
        ScrollToDirective.propDecorators = {
            ngxScrollTo: [{ type: core.Input, args: ['ngx-scroll-to',] }],
            ngxScrollToEvent: [{ type: core.Input, args: ['ngx-scroll-to-event',] }],
            ngxScrollToDuration: [{ type: core.Input, args: ['ngx-scroll-to-duration',] }],
            ngxScrollToEasing: [{ type: core.Input, args: ['ngx-scroll-to-easing',] }],
            ngxScrollToOffset: [{ type: core.Input, args: ['ngx-scroll-to-offset',] }],
            ngxScrollToOffsetMap: [{ type: core.Input, args: ['ngx-scroll-to-offset-map',] }]
        };
        return ScrollToDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Scroll To Module
     */
    var ScrollToModule = /** @class */ (function () {
        function ScrollToModule() {
        }
        /**
         * Guaranteed singletons for provided Services across App.
         *
         * @return          An Angular Module with Providers
         */
        /**
         * Guaranteed singletons for provided Services across App.
         *
         * @return {?} An Angular Module with Providers
         */
        ScrollToModule.forRoot = /**
         * Guaranteed singletons for provided Services across App.
         *
         * @return {?} An Angular Module with Providers
         */
            function () {
                return {
                    ngModule: ScrollToModule,
                    providers: [
                        ScrollToService
                    ]
                };
            };
        ScrollToModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ScrollToDirective
                        ],
                        exports: [
                            ScrollToDirective
                        ]
                    },] }
        ];
        return ScrollToModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ScrollToDirective = ScrollToDirective;
    exports.ScrollToModule = ScrollToModule;
    exports.ScrollToService = ScrollToService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=nicky-lenaers-ngx-scroll-to.umd.js.map