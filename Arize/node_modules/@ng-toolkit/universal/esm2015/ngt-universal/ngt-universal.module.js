/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { NgModule, InjectionToken } from '@angular/core';
import { WindowService } from './window.service';
import { LocalStorageWrapper } from './local-storage-wrapper.service';
import { DocumentService } from './document.service';
export { DocumentService } from './document.service';
/** @type {?} */
export const WINDOW = new InjectionToken('ng-toolkit-window');
/**
 * @param {?} windowService
 * @return {?}
 */
export function windowFactory(windowService) {
    return windowService.nativeWindow;
}
/** @type {?} */
export const LOCAL_STORAGE = new InjectionToken('ng-toolkit-local-storage');
/**
 * @param {?} localStorageWrapper
 * @return {?}
 */
export function localStorageFactory(localStorageWrapper) {
    return localStorageWrapper.localStorage;
}
/** @type {?} */
export const NGT_DOCUMENT = new InjectionToken('ng-toolkit-document');
/**
 * @param {?} documentService
 * @return {?}
 */
export function documentFactory(documentService) {
    console.log('document factory');
    return documentService.nativeDocument;
}
export class NgtUniversalModule {
}
NgtUniversalModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    WindowService,
                    { provide: WINDOW, useFactory: windowFactory, deps: [WindowService] },
                    DocumentService,
                    { provide: NGT_DOCUMENT, useFactory: documentFactory, deps: [DocumentService] },
                    LocalStorageWrapper,
                    { provide: LOCAL_STORAGE, useFactory: localStorageFactory, deps: [LocalStorageWrapper] }
                ]
            },] },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd0LXVuaXZlcnNhbC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmctdG9vbGtpdC91bml2ZXJzYWwvIiwic291cmNlcyI6WyJuZ3QtdW5pdmVyc2FsL25ndC11bml2ZXJzYWwubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDdEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXJELGdDQUFjLG9CQUFvQixDQUFDOztBQUVuQyxNQUFNLE9BQU8sTUFBTSxHQUFHLElBQUksY0FBYyxDQUFDLG1CQUFtQixDQUFDOzs7OztBQUU3RCxNQUFNLFVBQVUsYUFBYSxDQUFDLGFBQTRCO0lBQ3RELE9BQU8sYUFBYSxDQUFDLFlBQVksQ0FBQztBQUN0QyxDQUFDOztBQUVELE1BQU0sT0FBTyxhQUFhLEdBQUcsSUFBSSxjQUFjLENBQUMsMEJBQTBCLENBQUM7Ozs7O0FBRTNFLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxtQkFBd0M7SUFDeEUsT0FBTyxtQkFBbUIsQ0FBQyxZQUFZLENBQUM7QUFDNUMsQ0FBQzs7QUFFRCxNQUFNLE9BQU8sWUFBWSxHQUFHLElBQUksY0FBYyxDQUFDLHFCQUFxQixDQUFDOzs7OztBQUVyRSxNQUFNLFVBQVUsZUFBZSxDQUFDLGVBQWdDO0lBQzVELE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNoQyxPQUFPLGVBQWUsQ0FBQyxjQUFjLENBQUM7QUFDMUMsQ0FBQztBQVlELE1BQU0sT0FBTyxrQkFBa0I7OztZQVY5QixRQUFRLFNBQUM7Z0JBQ04sU0FBUyxFQUFFO29CQUNQLGFBQWE7b0JBQ2IsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUU7b0JBQ3JFLGVBQWU7b0JBQ2YsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUU7b0JBQy9FLG1CQUFtQjtvQkFDbkIsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO2lCQUMzRjthQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBXaW5kb3dTZXJ2aWNlIH0gZnJvbSAnLi93aW5kb3cuc2VydmljZSc7XG5pbXBvcnQgeyBMb2NhbFN0b3JhZ2VXcmFwcGVyIH0gZnJvbSAnLi9sb2NhbC1zdG9yYWdlLXdyYXBwZXIuc2VydmljZSc7XG5pbXBvcnQgeyBEb2N1bWVudFNlcnZpY2UgfSBmcm9tICcuL2RvY3VtZW50LnNlcnZpY2UnO1xuXG5leHBvcnQgKiBmcm9tICcuL2RvY3VtZW50LnNlcnZpY2UnO1xuXG5leHBvcnQgY29uc3QgV0lORE9XID0gbmV3IEluamVjdGlvblRva2VuKCduZy10b29sa2l0LXdpbmRvdycpO1xuXG5leHBvcnQgZnVuY3Rpb24gd2luZG93RmFjdG9yeSh3aW5kb3dTZXJ2aWNlOiBXaW5kb3dTZXJ2aWNlKSB7XG4gICAgcmV0dXJuIHdpbmRvd1NlcnZpY2UubmF0aXZlV2luZG93O1xufVxuXG5leHBvcnQgY29uc3QgTE9DQUxfU1RPUkFHRSA9IG5ldyBJbmplY3Rpb25Ub2tlbignbmctdG9vbGtpdC1sb2NhbC1zdG9yYWdlJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbFN0b3JhZ2VGYWN0b3J5KGxvY2FsU3RvcmFnZVdyYXBwZXI6IExvY2FsU3RvcmFnZVdyYXBwZXIpIHtcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlV3JhcHBlci5sb2NhbFN0b3JhZ2U7XG59XG5cbmV4cG9ydCBjb25zdCBOR1RfRE9DVU1FTlQgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ25nLXRvb2xraXQtZG9jdW1lbnQnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRvY3VtZW50RmFjdG9yeShkb2N1bWVudFNlcnZpY2U6IERvY3VtZW50U2VydmljZSkge1xuICAgIGNvbnNvbGUubG9nKCdkb2N1bWVudCBmYWN0b3J5Jyk7XG4gICAgcmV0dXJuIGRvY3VtZW50U2VydmljZS5uYXRpdmVEb2N1bWVudDtcbn1cblxuQE5nTW9kdWxlKHtcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgV2luZG93U2VydmljZSxcbiAgICAgICAgeyBwcm92aWRlOiBXSU5ET1csIHVzZUZhY3Rvcnk6IHdpbmRvd0ZhY3RvcnksIGRlcHM6IFtXaW5kb3dTZXJ2aWNlXSB9LFxuICAgICAgICBEb2N1bWVudFNlcnZpY2UsXG4gICAgICAgIHsgcHJvdmlkZTogTkdUX0RPQ1VNRU5ULCB1c2VGYWN0b3J5OiBkb2N1bWVudEZhY3RvcnksIGRlcHM6IFtEb2N1bWVudFNlcnZpY2VdIH0sXG4gICAgICAgIExvY2FsU3RvcmFnZVdyYXBwZXIsXG4gICAgICAgIHsgcHJvdmlkZTogTE9DQUxfU1RPUkFHRSwgdXNlRmFjdG9yeTogbG9jYWxTdG9yYWdlRmFjdG9yeSwgZGVwczogW0xvY2FsU3RvcmFnZVdyYXBwZXJdIH1cbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIE5ndFVuaXZlcnNhbE1vZHVsZSB7fVxuIl19