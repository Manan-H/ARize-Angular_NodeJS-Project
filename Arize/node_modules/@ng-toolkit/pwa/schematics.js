"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const _utils_1 = require("@ng-toolkit/_utils");
const test_1 = require("@schematics/angular/utility/test");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const bugsnag = require("bugsnag");
function index(options) {
    bugsnag.register('0b326fddc255310e516875c9874fed91');
    bugsnag.onBeforeNotify((notification) => {
        let metaData = notification.events[0].metaData;
        metaData.subsystem = {
            package: 'pwa',
            options: options
        };
    });
    let rule = schematics_1.chain([
        (tree, context) => {
            //check if angular/pwa was applied
            const cliConfig = JSON.parse(test_1.getFileContent(tree, `${options.directory}/angular.json`));
            if (!cliConfig.projects[options.clientProject].architect.build.configurations.production.serviceWorker) {
                throw new _utils_1.NgToolkitException(`Run 'ng add @angular/universal' before applying this schematics.`);
            }
            // add entry to server module
            let serverModulePath = options.serverModule ? options.serverModule : findServerModule(tree, options);
            if (serverModulePath) {
                _utils_1.addImportStatement(tree, serverModulePath, 'NgtPwaMockModule', '@ng-toolkit/pwa');
                _utils_1.addToNgModule(tree, serverModulePath, 'imports', 'NgtPwaMockModule');
            }
            const ngToolkitSettings = _utils_1.getNgToolkitInfo(tree);
            if (!ngToolkitSettings.pwa) {
                //add update mechanism
                let bootstrapComponent = _utils_1.getBootStrapComponent(tree, _utils_1.getAppEntryModule(tree, options).filePath)[0];
                let swUpdateVar = _utils_1.addDependencyInjection(tree, bootstrapComponent.filePath, 'swUpdate', 'SwUpdate', '@angular/service-worker');
                _utils_1.implementInterface(tree, bootstrapComponent.filePath, 'OnInit', '@angular/core');
                let methodBodyEdges = _utils_1.getMethodBodyEdges(tree, bootstrapComponent.filePath, 'ngOnInit');
                let fileContent = test_1.getFileContent(tree, bootstrapComponent.filePath);
                if (!methodBodyEdges) {
                    _utils_1.addMethod(tree, bootstrapComponent.filePath, 'public ngOnInit():void {}');
                    methodBodyEdges = _utils_1.getMethodBodyEdges(tree, bootstrapComponent.filePath, 'ngOnInit');
                    fileContent = test_1.getFileContent(tree, bootstrapComponent.filePath);
                }
                if (methodBodyEdges)
                    fileContent = fileContent.substring(0, methodBodyEdges.start) + `
        if (this.${swUpdateVar}.isEnabled) {
            this.${swUpdateVar}.available.subscribe((evt) => {
                console.log('service worker updated');
            });
    
            this.${swUpdateVar}.checkForUpdate().then(() => {
                // noop
            }).catch((err) => {
                console.error('error when checking for update', err);
            });
        }` + fileContent.substring(methodBodyEdges.end);
                _utils_1.createOrOverwriteFile(tree, bootstrapComponent.filePath, fileContent);
            }
            ngToolkitSettings.pwa = options;
            _utils_1.updateNgToolkitInfo(tree, ngToolkitSettings);
            if (!options.skipInstall) {
                context.addTask(new tasks_1.NodePackageInstallTask(options.directory));
            }
            return tree;
        }
    ]);
    if (!options.disableBugsnag) {
        return _utils_1.applyAndLog(rule);
    }
    else {
        return rule;
    }
}
exports.default = index;
function findServerModule(tree, options) {
    let mainServerFilePath = _utils_1.getMainServerFilePath(tree, options);
    if (!mainServerFilePath) {
        console.log(`\u001B[33mINFO: \u001b[0mCan't find server build in angular.json; Use @ng-toolkit/universal for server-side rendering.`);
        return undefined;
    }
    let mainFileContent = test_1.getFileContent(tree, `${options.directory}/${mainServerFilePath}`);
    let match = mainFileContent.match(/export[\s\S]*?{[\s\S]*?}[\s\S]*?from[\s\S]*?['"](.*)['"]/);
    if (!match) {
        throw new _utils_1.NgToolkitException(`Can't find server app module in $${options.directory}/${mainServerFilePath}`, { fileContent: mainFileContent });
    }
    return _utils_1.normalizePath(`${options.directory}/${mainServerFilePath.substring(0, mainServerFilePath.lastIndexOf('/'))}/${match[1]}.ts`);
}
//# sourceMappingURL=schematics.js.map