/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
var ScriptService = /** @class */ (function () {
    function ScriptService(zone) {
        this.zone = zone;
        /**
         * Name of the global google recaptcha script
         */
        this.windowGrecaptcha = 'grecaptcha';
        /**
         * Name of the global callback
         */
        this.windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';
        this.globalDomain = 'recaptcha.net';
        this.defaultDomain = 'google.com';
    }
    /**
     * @param {?} useGlobalDomain
     * @param {?} render
     * @param {?} onLoad
     * @param {?=} language
     * @return {?}
     */
    ScriptService.prototype.registerCaptchaScript = /**
     * @param {?} useGlobalDomain
     * @param {?} render
     * @param {?} onLoad
     * @param {?=} language
     * @return {?}
     */
    function (useGlobalDomain, render, onLoad, language) {
        var _this = this;
        if (this.grecaptchaScriptLoaded()) {
            // recaptcha script is already loaded
            // just call the callback
            this.zone.run(function () {
                onLoad(window[_this.windowGrecaptcha]);
            });
            return;
        }
        // we need to patch the callback through global variable, otherwise callback is not accessible
        // note: https://github.com/Enngage/ngx-captcha/issues/2
        window[this.windowOnLoadCallbackProperty] = (/** @type {?} */ ((function () { return _this.zone.run(onLoad.bind(_this, window[_this.windowGrecaptcha])); })));
        // prepare script elem
        /** @type {?} */
        var scriptElem = document.createElement('script');
        scriptElem.innerHTML = '';
        scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);
        scriptElem.async = true;
        scriptElem.defer = true;
        // add script to header
        document.getElementsByTagName('head')[0].appendChild(scriptElem);
    };
    /**
     * @return {?}
     */
    ScriptService.prototype.cleanup = /**
     * @return {?}
     */
    function () {
        window[this.windowOnLoadCallbackProperty] = undefined;
        window[this.windowGrecaptcha] = undefined;
    };
    /**
     * Indicates if google recaptcha script is available and ready to be used
     */
    /**
     * Indicates if google recaptcha script is available and ready to be used
     * @return {?}
     */
    ScriptService.prototype.grecaptchaScriptLoaded = /**
     * Indicates if google recaptcha script is available and ready to be used
     * @return {?}
     */
    function () {
        if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {
            return true;
        }
        return false;
    };
    /**
     * Gets language param used in script url
     */
    /**
     * Gets language param used in script url
     * @param {?=} hl
     * @return {?}
     */
    ScriptService.prototype.getLanguageParam = /**
     * Gets language param used in script url
     * @param {?=} hl
     * @return {?}
     */
    function (hl) {
        if (!hl) {
            return '';
        }
        return "&hl=" + hl;
    };
    /**
    * Url to google api script
    */
    /**
     * Url to google api script
     * @param {?} useGlobalDomain
     * @param {?} render
     * @param {?=} language
     * @return {?}
     */
    ScriptService.prototype.getCaptchaScriptUrl = /**
     * Url to google api script
     * @param {?} useGlobalDomain
     * @param {?} render
     * @param {?=} language
     * @return {?}
     */
    function (useGlobalDomain, render, language) {
        /** @type {?} */
        var domain = useGlobalDomain ? this.globalDomain : this.defaultDomain;
        // tslint:disable-next-line:max-line-length
        return "https://www." + domain + "/recaptcha/api.js?onload=" + this.windowOnLoadCallbackProperty + "&render=" + render + this.getLanguageParam(language);
    };
    ScriptService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ScriptService.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    return ScriptService;
}());
export { ScriptService };
if (false) {
    /**
     * Name of the global google recaptcha script
     * @type {?}
     */
    ScriptService.prototype.windowGrecaptcha;
    /**
     * Name of the global callback
     * @type {?}
     */
    ScriptService.prototype.windowOnLoadCallbackProperty;
    /** @type {?} */
    ScriptService.prototype.globalDomain;
    /** @type {?} */
    ScriptService.prototype.defaultDomain;
    /** @type {?} */
    ScriptService.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY2FwdGNoYS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9zY3JpcHQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJbkQ7SUFpQkksdUJBQ2MsSUFBWTtRQUFaLFNBQUksR0FBSixJQUFJLENBQVE7Ozs7UUFaUCxxQkFBZ0IsR0FBRyxZQUFZLENBQUM7Ozs7UUFLaEMsaUNBQTRCLEdBQUcsNkJBQTZCLENBQUM7UUFFN0QsaUJBQVksR0FBVyxlQUFlLENBQUM7UUFFdkMsa0JBQWEsR0FBVyxZQUFZLENBQUM7SUFLeEQsQ0FBQzs7Ozs7Ozs7SUFFRCw2Q0FBcUI7Ozs7Ozs7SUFBckIsVUFBc0IsZUFBd0IsRUFBRSxNQUFjLEVBQUUsTUFBaUMsRUFBRSxRQUFpQjtRQUFwSCxpQkF5QkM7UUF4QkcsSUFBSSxJQUFJLENBQUMsc0JBQXNCLEVBQUUsRUFBRTtZQUMvQixxQ0FBcUM7WUFDckMseUJBQXlCO1lBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2dCQUNWLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztZQUMxQyxDQUFDLENBQUMsQ0FBQztZQUNILE9BQU87U0FDVjtRQUVELDhGQUE4RjtRQUM5Rix3REFBd0Q7UUFDeEQsTUFBTSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLG1CQUFLLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUNqRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUksRUFBRSxNQUFNLENBQUMsS0FBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FDbkQsRUFGdUQsQ0FFdkQsQ0FBQyxFQUFBLENBQUM7OztZQUdHLFVBQVUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUNuRCxVQUFVLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUMxQixVQUFVLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzdFLFVBQVUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLFVBQVUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBRXhCLHVCQUF1QjtRQUN2QixRQUFRLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7Ozs7SUFFRCwrQkFBTzs7O0lBQVA7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsU0FBUyxDQUFDO1FBQ3RELE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxTQUFTLENBQUM7SUFDOUMsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNLLDhDQUFzQjs7OztJQUE5QjtRQUNJLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtZQUM1RSxPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSyx3Q0FBZ0I7Ozs7O0lBQXhCLFVBQXlCLEVBQVc7UUFDaEMsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNMLE9BQU8sRUFBRSxDQUFDO1NBQ2I7UUFFRCxPQUFPLFNBQU8sRUFBSSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7TUFFRTs7Ozs7Ozs7SUFDTSwyQ0FBbUI7Ozs7Ozs7SUFBM0IsVUFBNEIsZUFBd0IsRUFBRSxNQUFjLEVBQUUsUUFBaUI7O1lBQzdFLE1BQU0sR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhO1FBRXZFLDJDQUEyQztRQUMzQyxPQUFPLGlCQUFlLE1BQU0saUNBQTRCLElBQUksQ0FBQyw0QkFBNEIsZ0JBQVcsTUFBTSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUcsQ0FBQztJQUNuSixDQUFDOztnQkFuRkosVUFBVTs7OztnQkFKVSxNQUFNOztJQXlGM0Isb0JBQUM7Q0FBQSxBQXJGRCxJQXFGQztTQXBGWSxhQUFhOzs7Ozs7SUFLdEIseUNBQW1EOzs7OztJQUtuRCxxREFBZ0Y7O0lBRWhGLHFDQUEwRDs7SUFFMUQsc0NBQXdEOztJQUdwRCw2QkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmRlY2xhcmUgdmFyIGRvY3VtZW50OiBhbnk7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBTY3JpcHRTZXJ2aWNlIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE5hbWUgb2YgdGhlIGdsb2JhbCBnb29nbGUgcmVjYXB0Y2hhIHNjcmlwdFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgd2luZG93R3JlY2FwdGNoYSA9ICdncmVjYXB0Y2hhJztcclxuXHJcbiAgICAvKipcclxuICAgICogTmFtZSBvZiB0aGUgZ2xvYmFsIGNhbGxiYWNrXHJcbiAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHdpbmRvd09uTG9hZENhbGxiYWNrUHJvcGVydHkgPSAnbmd4X2NhcHRjaGFfb25sb2FkX2NhbGxiYWNrJztcclxuXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZ2xvYmFsRG9tYWluOiBzdHJpbmcgPSAncmVjYXB0Y2hhLm5ldCc7XHJcblxyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGRlZmF1bHREb21haW46IHN0cmluZyA9ICdnb29nbGUuY29tJztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcm90ZWN0ZWQgem9uZTogTmdab25lLFxyXG4gICAgKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcmVnaXN0ZXJDYXB0Y2hhU2NyaXB0KHVzZUdsb2JhbERvbWFpbjogYm9vbGVhbiwgcmVuZGVyOiBzdHJpbmcsIG9uTG9hZDogKGdyZWNhcHRjaGE6IGFueSkgPT4gdm9pZCwgbGFuZ3VhZ2U/OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5ncmVjYXB0Y2hhU2NyaXB0TG9hZGVkKCkpIHtcclxuICAgICAgICAgICAgLy8gcmVjYXB0Y2hhIHNjcmlwdCBpcyBhbHJlYWR5IGxvYWRlZFxyXG4gICAgICAgICAgICAvLyBqdXN0IGNhbGwgdGhlIGNhbGxiYWNrXHJcbiAgICAgICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgb25Mb2FkKHdpbmRvd1t0aGlzLndpbmRvd0dyZWNhcHRjaGFdKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gcGF0Y2ggdGhlIGNhbGxiYWNrIHRocm91Z2ggZ2xvYmFsIHZhcmlhYmxlLCBvdGhlcndpc2UgY2FsbGJhY2sgaXMgbm90IGFjY2Vzc2libGVcclxuICAgICAgICAvLyBub3RlOiBodHRwczovL2dpdGh1Yi5jb20vRW5uZ2FnZS9uZ3gtY2FwdGNoYS9pc3N1ZXMvMlxyXG4gICAgICAgIHdpbmRvd1t0aGlzLndpbmRvd09uTG9hZENhbGxiYWNrUHJvcGVydHldID0gPGFueT4oKCkgPT4gdGhpcy56b25lLnJ1bihcclxuICAgICAgICAgICAgb25Mb2FkLmJpbmQodGhpcywgd2luZG93W3RoaXMud2luZG93R3JlY2FwdGNoYV0pXHJcbiAgICAgICAgKSk7XHJcblxyXG4gICAgICAgIC8vIHByZXBhcmUgc2NyaXB0IGVsZW1cclxuICAgICAgICBjb25zdCBzY3JpcHRFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgICAgc2NyaXB0RWxlbS5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICBzY3JpcHRFbGVtLnNyYyA9IHRoaXMuZ2V0Q2FwdGNoYVNjcmlwdFVybCh1c2VHbG9iYWxEb21haW4sIHJlbmRlciwgbGFuZ3VhZ2UpO1xyXG4gICAgICAgIHNjcmlwdEVsZW0uYXN5bmMgPSB0cnVlO1xyXG4gICAgICAgIHNjcmlwdEVsZW0uZGVmZXIgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBhZGQgc2NyaXB0IHRvIGhlYWRlclxyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc2NyaXB0RWxlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYW51cCgpOiB2b2lkIHtcclxuICAgICAgICB3aW5kb3dbdGhpcy53aW5kb3dPbkxvYWRDYWxsYmFja1Byb3BlcnR5XSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB3aW5kb3dbdGhpcy53aW5kb3dHcmVjYXB0Y2hhXSA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEluZGljYXRlcyBpZiBnb29nbGUgcmVjYXB0Y2hhIHNjcmlwdCBpcyBhdmFpbGFibGUgYW5kIHJlYWR5IHRvIGJlIHVzZWRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBncmVjYXB0Y2hhU2NyaXB0TG9hZGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh3aW5kb3dbdGhpcy53aW5kb3dPbkxvYWRDYWxsYmFja1Byb3BlcnR5XSAmJiB3aW5kb3dbdGhpcy53aW5kb3dHcmVjYXB0Y2hhXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBsYW5ndWFnZSBwYXJhbSB1c2VkIGluIHNjcmlwdCB1cmxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRMYW5ndWFnZVBhcmFtKGhsPzogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoIWhsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBgJmhsPSR7aGx9YDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogVXJsIHRvIGdvb2dsZSBhcGkgc2NyaXB0XHJcbiAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRDYXB0Y2hhU2NyaXB0VXJsKHVzZUdsb2JhbERvbWFpbjogYm9vbGVhbiwgcmVuZGVyOiBzdHJpbmcsIGxhbmd1YWdlPzogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBkb21haW4gPSB1c2VHbG9iYWxEb21haW4gPyB0aGlzLmdsb2JhbERvbWFpbiA6IHRoaXMuZGVmYXVsdERvbWFpbjtcclxuXHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxyXG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly93d3cuJHtkb21haW59L3JlY2FwdGNoYS9hcGkuanM/b25sb2FkPSR7dGhpcy53aW5kb3dPbkxvYWRDYWxsYmFja1Byb3BlcnR5fSZyZW5kZXI9JHtyZW5kZXJ9JHt0aGlzLmdldExhbmd1YWdlUGFyYW0obGFuZ3VhZ2UpfWA7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==