(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@angular/core'), require('@angular/service-worker')) :
    typeof define === 'function' && define.amd ? define('@ng-toolkit/pwa', ['exports', 'rxjs', '@angular/core', '@angular/service-worker'], factory) :
    (factory((global['ng-toolkit'] = global['ng-toolkit'] || {}, global['ng-toolkit'].pwa = {}),global.rxjs,global.ng.core,global.ng['service-worker']));
}(this, (function (exports,rxjs,core,serviceWorker) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var SwUpdateServerMock = /** @class */ (function () {
        function SwUpdateServerMock() {
            this.available = new rxjs.Subject();
            this.activated = new rxjs.Subject();
            this.isEnabled = false;
        }
        /**
         * @return {?}
         */
        SwUpdateServerMock.prototype.checkForUpdate = /**
         * @return {?}
         */
            function () {
                return new Promise(function (resolve) { return resolve(); });
            };
        /**
         * @return {?}
         */
        SwUpdateServerMock.prototype.activateUpdate = /**
         * @return {?}
         */
            function () {
                return new Promise(function (resolve) { return resolve(); });
            };
        return SwUpdateServerMock;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var SwPushServerMock = /** @class */ (function () {
        function SwPushServerMock() {
        }
        /**
         * @param {?} options
         * @return {?}
         */
        SwPushServerMock.prototype.requestSubscription = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                console.log("requested subscription with options: " + options);
                return new Promise(function (resolve) { return resolve(); });
            };
        /**
         * @return {?}
         */
        SwPushServerMock.prototype.unsubscribe = /**
         * @return {?}
         */
            function () {
                return new Promise(function (resolve) { return resolve(); });
            };
        return SwPushServerMock;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var NgtPwaMockModule = /** @class */ (function () {
        function NgtPwaMockModule() {
        }
        NgtPwaMockModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            { provide: serviceWorker.SwUpdate, useClass: SwUpdateServerMock },
                            { provide: serviceWorker.SwPush, useClass: SwPushServerMock }
                        ]
                    },] },
        ];
        return NgtPwaMockModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.NgtPwaMockModule = NgtPwaMockModule;
    exports.SwPushServerMock = SwPushServerMock;
    exports.SwUpdateServerMock = SwUpdateServerMock;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdG9vbGtpdC1wd2EudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9AbmctdG9vbGtpdC9wd2Evbmd0LXB3YS9zdy11cGRhdGUtc2VydmVyLm1vY2suc2VydmljZS50cyIsIm5nOi8vQG5nLXRvb2xraXQvcHdhL25ndC1wd2Evc3ctcHVzaC1zZXJ2ZXIubW9jay5zZXJ2aWNlLnRzIiwibmc6Ly9AbmctdG9vbGtpdC9wd2Evbmd0LXB3YS9uZ3QtcHdhLW1vY2subW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFVwZGF0ZUFjdGl2YXRlZEV2ZW50LCBVcGRhdGVBdmFpbGFibGVFdmVudCB9IGZyb20gJ0Bhbmd1bGFyL3NlcnZpY2Utd29ya2VyL3NyYy9sb3dfbGV2ZWwnO1xuXG5leHBvcnQgY2xhc3MgU3dVcGRhdGVTZXJ2ZXJNb2NrIHtcbiAgcHVibGljIGF2YWlsYWJsZTogT2JzZXJ2YWJsZTxVcGRhdGVBdmFpbGFibGVFdmVudD4gPSBuZXcgU3ViamVjdCgpO1xuICBwdWJsaWMgYWN0aXZhdGVkOiBPYnNlcnZhYmxlPFVwZGF0ZUFjdGl2YXRlZEV2ZW50PiA9IG5ldyBTdWJqZWN0KCk7XG4gIHB1YmxpYyBpc0VuYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwdWJsaWMgY2hlY2tGb3JVcGRhdGUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiByZXNvbHZlKCkpO1xuICB9XG4gIHB1YmxpYyBhY3RpdmF0ZVVwZGF0ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHJlc29sdmUoKSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGNsYXNzIFN3UHVzaFNlcnZlck1vY2sge1xuICAgIHB1YmxpYyBtZXNzYWdlczogT2JzZXJ2YWJsZTxvYmplY3Q+O1xuICAgIHB1YmxpYyBzdWJzY3JpcHRpb246IE9ic2VydmFibGU8UHVzaFN1YnNjcmlwdGlvbiB8IG51bGw+O1xuICAgIHB1YmxpYyByZXF1ZXN0U3Vic2NyaXB0aW9uKG9wdGlvbnM6IHtcbiAgICAgICAgc2VydmVyUHVibGljS2V5OiBzdHJpbmc7XG4gICAgfSk6IFByb21pc2U8UHVzaFN1YnNjcmlwdGlvbj4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgcmVxdWVzdGVkIHN1YnNjcmlwdGlvbiB3aXRoIG9wdGlvbnM6ICR7b3B0aW9uc31gKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiByZXNvbHZlKCkpO1xuICAgIH1cbiAgICBwdWJsaWMgdW5zdWJzY3JpYmUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVzb2x2ZSgpKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3dQdXNoLCBTd1VwZGF0ZSB9IGZyb20gJ0Bhbmd1bGFyL3NlcnZpY2Utd29ya2VyJztcbmltcG9ydCB7IFN3VXBkYXRlU2VydmVyTW9jayB9IGZyb20gJy4vc3ctdXBkYXRlLXNlcnZlci5tb2NrLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3dQdXNoU2VydmVyTW9jayB9IGZyb20gJy4vc3ctcHVzaC1zZXJ2ZXIubW9jay5zZXJ2aWNlJztcblxuXG5ATmdNb2R1bGUoe1xuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7cHJvdmlkZTogU3dVcGRhdGUsIHVzZUNsYXNzOiBTd1VwZGF0ZVNlcnZlck1vY2sgfSxcbiAgICAgICAge3Byb3ZpZGU6IFN3UHVzaCwgdXNlQ2xhc3M6IFN3UHVzaFNlcnZlck1vY2sgfVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgTmd0UHdhTW9ja01vZHVsZSB7fVxuIl0sIm5hbWVzIjpbIlN1YmplY3QiLCJOZ01vZHVsZSIsIlN3VXBkYXRlIiwiU3dQdXNoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7UUFHQTtZQUNTLGNBQVMsR0FBcUMsSUFBSUEsWUFBTyxFQUFFLENBQUM7WUFDNUQsY0FBUyxHQUFxQyxJQUFJQSxZQUFPLEVBQUUsQ0FBQztZQUM1RCxjQUFTLEdBQVksS0FBSyxDQUFDO1NBUW5DOzs7O1FBTlEsMkNBQWM7OztZQUFyQjtnQkFDRSxPQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxJQUFLLE9BQUEsT0FBTyxFQUFFLEdBQUEsQ0FBQyxDQUFDO2FBQzVDOzs7O1FBQ00sMkNBQWM7OztZQUFyQjtnQkFDRSxPQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxJQUFLLE9BQUEsT0FBTyxFQUFFLEdBQUEsQ0FBQyxDQUFDO2FBQzVDO1FBQ0gseUJBQUM7SUFBRCxDQUFDOzs7Ozs7QUNaRDtRQUFBO1NBWUM7Ozs7O1FBVFUsOENBQW1COzs7O1lBQTFCLFVBQTJCLE9BRTFCO2dCQUNHLE9BQU8sQ0FBQyxHQUFHLENBQUMsMENBQXdDLE9BQVMsQ0FBQyxDQUFDO2dCQUMvRCxPQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxJQUFLLE9BQUEsT0FBTyxFQUFFLEdBQUEsQ0FBQyxDQUFDO2FBQzlDOzs7O1FBQ00sc0NBQVc7OztZQUFsQjtnQkFDSSxPQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxJQUFLLE9BQUEsT0FBTyxFQUFFLEdBQUEsQ0FBQyxDQUFDO2FBQzlDO1FBQ0wsdUJBQUM7SUFBRCxDQUFDOzs7Ozs7QUNkRDtRQU1BO1NBTWdDOztvQkFOL0JDLGFBQVEsU0FBQzt3QkFDTixTQUFTLEVBQUU7NEJBQ1AsRUFBQyxPQUFPLEVBQUVDLHNCQUFRLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFOzRCQUNsRCxFQUFDLE9BQU8sRUFBRUMsb0JBQU0sRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUU7eUJBQ2pEO3FCQUNKOztRQUM4Qix1QkFBQztLQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=