import { Subject } from 'rxjs';
import { NgModule } from '@angular/core';
import { SwPush, SwUpdate } from '@angular/service-worker';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class SwUpdateServerMock {
    constructor() {
        this.available = new Subject();
        this.activated = new Subject();
        this.isEnabled = false;
    }
    /**
     * @return {?}
     */
    checkForUpdate() {
        return new Promise((resolve) => resolve());
    }
    /**
     * @return {?}
     */
    activateUpdate() {
        return new Promise((resolve) => resolve());
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class SwPushServerMock {
    /**
     * @param {?} options
     * @return {?}
     */
    requestSubscription(options) {
        console.log(`requested subscription with options: ${options}`);
        return new Promise((resolve) => resolve());
    }
    /**
     * @return {?}
     */
    unsubscribe() {
        return new Promise((resolve) => resolve());
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class NgtPwaMockModule {
}
NgtPwaMockModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    { provide: SwUpdate, useClass: SwUpdateServerMock },
                    { provide: SwPush, useClass: SwPushServerMock }
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { NgtPwaMockModule, SwPushServerMock, SwUpdateServerMock };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdG9vbGtpdC1wd2EuanMubWFwIiwic291cmNlcyI6WyJuZzovL0BuZy10b29sa2l0L3B3YS9uZ3QtcHdhL3N3LXVwZGF0ZS1zZXJ2ZXIubW9jay5zZXJ2aWNlLnRzIiwibmc6Ly9AbmctdG9vbGtpdC9wd2Evbmd0LXB3YS9zdy1wdXNoLXNlcnZlci5tb2NrLnNlcnZpY2UudHMiLCJuZzovL0BuZy10b29sa2l0L3B3YS9uZ3QtcHdhL25ndC1wd2EtbW9jay5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVXBkYXRlQWN0aXZhdGVkRXZlbnQsIFVwZGF0ZUF2YWlsYWJsZUV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvc2VydmljZS13b3JrZXIvc3JjL2xvd19sZXZlbCc7XG5cbmV4cG9ydCBjbGFzcyBTd1VwZGF0ZVNlcnZlck1vY2sge1xuICBwdWJsaWMgYXZhaWxhYmxlOiBPYnNlcnZhYmxlPFVwZGF0ZUF2YWlsYWJsZUV2ZW50PiA9IG5ldyBTdWJqZWN0KCk7XG4gIHB1YmxpYyBhY3RpdmF0ZWQ6IE9ic2VydmFibGU8VXBkYXRlQWN0aXZhdGVkRXZlbnQ+ID0gbmV3IFN1YmplY3QoKTtcbiAgcHVibGljIGlzRW5hYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHB1YmxpYyBjaGVja0ZvclVwZGF0ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHJlc29sdmUoKSk7XG4gIH1cbiAgcHVibGljIGFjdGl2YXRlVXBkYXRlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVzb2x2ZSgpKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgY2xhc3MgU3dQdXNoU2VydmVyTW9jayB7XG4gICAgcHVibGljIG1lc3NhZ2VzOiBPYnNlcnZhYmxlPG9iamVjdD47XG4gICAgcHVibGljIHN1YnNjcmlwdGlvbjogT2JzZXJ2YWJsZTxQdXNoU3Vic2NyaXB0aW9uIHwgbnVsbD47XG4gICAgcHVibGljIHJlcXVlc3RTdWJzY3JpcHRpb24ob3B0aW9uczoge1xuICAgICAgICBzZXJ2ZXJQdWJsaWNLZXk6IHN0cmluZztcbiAgICB9KTogUHJvbWlzZTxQdXNoU3Vic2NyaXB0aW9uPiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGByZXF1ZXN0ZWQgc3Vic2NyaXB0aW9uIHdpdGggb3B0aW9uczogJHtvcHRpb25zfWApO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHJlc29sdmUoKSk7XG4gICAgfVxuICAgIHB1YmxpYyB1bnN1YnNjcmliZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiByZXNvbHZlKCkpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTd1B1c2gsIFN3VXBkYXRlIH0gZnJvbSAnQGFuZ3VsYXIvc2VydmljZS13b3JrZXInO1xuaW1wb3J0IHsgU3dVcGRhdGVTZXJ2ZXJNb2NrIH0gZnJvbSAnLi9zdy11cGRhdGUtc2VydmVyLm1vY2suc2VydmljZSc7XG5pbXBvcnQgeyBTd1B1c2hTZXJ2ZXJNb2NrIH0gZnJvbSAnLi9zdy1wdXNoLXNlcnZlci5tb2NrLnNlcnZpY2UnO1xuXG5cbkBOZ01vZHVsZSh7XG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtwcm92aWRlOiBTd1VwZGF0ZSwgdXNlQ2xhc3M6IFN3VXBkYXRlU2VydmVyTW9jayB9LFxuICAgICAgICB7cHJvdmlkZTogU3dQdXNoLCB1c2VDbGFzczogU3dQdXNoU2VydmVyTW9jayB9XG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3RQd2FNb2NrTW9kdWxlIHt9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxNQUdhLGtCQUFrQjtJQUEvQjtRQUNTLGNBQVMsR0FBcUMsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUM1RCxjQUFTLEdBQXFDLElBQUksT0FBTyxFQUFFLENBQUM7UUFDNUQsY0FBUyxHQUFZLEtBQUssQ0FBQztLQVFuQzs7OztJQU5RLGNBQWM7UUFDbkIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sS0FBSyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0tBQzVDOzs7O0lBQ00sY0FBYztRQUNuQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRSxDQUFDLENBQUM7S0FDNUM7Q0FDRjs7Ozs7O0FDWkQsTUFBYSxnQkFBZ0I7Ozs7O0lBR2xCLG1CQUFtQixDQUFDLE9BRTFCO1FBQ0csT0FBTyxDQUFDLEdBQUcsQ0FBQyx3Q0FBd0MsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUMvRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRSxDQUFDLENBQUM7S0FDOUM7Ozs7SUFDTSxXQUFXO1FBQ2QsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sS0FBSyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0tBQzlDO0NBQ0o7Ozs7OztBQ2RELE1BWWEsZ0JBQWdCOzs7WUFONUIsUUFBUSxTQUFDO2dCQUNOLFNBQVMsRUFBRTtvQkFDUCxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFO29CQUNsRCxFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFO2lCQUNqRDthQUNKOzs7Ozs7Ozs7Ozs7Ozs7In0=