{"version":3,"file":"ngx-sharebuttons.umd.min.js","sources":["../../tmp/services/share-buttons.service.ts","../../tmp/modules/share-directive.module.ts","../../tmp/modules/share-button.module.ts","../../tmp/modules/share-buttons.module.ts","../../tmp/classes/facebook.class.ts","../../tmp/classes/twitter.class.ts","../../tmp/classes/linkedin.class.ts","../../tmp/classes/tumblr.class.ts","../../tmp/classes/whatsapp.class.ts","../../tmp/classes/pinterest.class.ts","../../tmp/classes/reddit.class.ts","../../tmp/classes/google.class.ts","../../tmp/classes/stumble.class.ts","../../tmp/classes/telegram.class.ts","../../tmp/classes/email.class.ts","../../tmp/classes/copy.class.ts","../../tmp/classes/print.class.ts","../../tmp/classes/vk.class.ts","../../tmp/classes/index.ts","../../tmp/modules/tokens.ts","../../tmp/services/universal-support.service.ts","../../tmp/directives/share-button.directive.ts","../../tmp/pipes/n-formatter.pipe.ts","../../tmp/components/share-button/share-button.component.ts","../../tmp/components/share-buttons/share-buttons.component.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\nimport {\n  FacebookButton,\n  TwitterButton,\n  GoogleButton,\n  PinterestButton,\n  TumblrButton,\n  EmailButton,\n  PrintButton,\n  LinkedinButton,\n  VKontakteButton,\n  StumbleButton,\n  RedditButton,\n  WhatsappButton,\n  TelegramButton,\n  CopyButton,\n  Buttons\n} from '../classes';\nimport { BUTTONS_META, OPTIONS } from '../modules/tokens';\n\n@Injectable()\nexport class ShareButtonsService {\n\n  /** All buttons */\n  allButtons = [\n    'facebook',\n    'twitter',\n    'linkedin',\n    'pinterest',\n    'google',\n    'stumble',\n    'reddit',\n    'whatsapp',\n    'tumblr',\n    'vk',\n    'telegram',\n    'email',\n    'copy',\n    'print'\n  ];\n\n  /** Default options */\n  options: ShareButtonsOptions = {\n    theme: 'default',\n    dialogWidth: 500,\n    dialogHeight: 400,\n    include: this.allButtons,\n    exclude: [],\n    size: 0,\n    title: null,\n    image: null,\n    description: null,\n    tags: null,\n    gaTracking: false,\n    twitterAccount: null\n  };\n\n  /** Button's meta data such as icon,color and text of each button */\n  meta: ShareButtonsMeta = Buttons;\n\n  constructor(private http: HttpClient,\n    @Inject(OPTIONS) options: ShareButtonsOptions,\n    @Inject(BUTTONS_META) meta: ShareButtonsMeta) {\n\n    /** Override global options with user's preference */\n    this.options = mergeDeep(this.options, options);\n    this.meta = mergeDeep(this.meta, meta);\n  }\n\n\n  get twitterAccount() {\n    return this.options.twitterAccount;\n  }\n\n  get dialogSize() {\n    return `width=${this.options.dialogWidth}, height=${this.options.dialogHeight}`;\n  }\n\n  /** Get all wanted buttons */\n  get buttons() {\n    if (!this.options.exclude.length) {\n      return this.options.include;\n    }\n    return this.options.include.filter((btn) => this.options.exclude.indexOf(btn) < 0);\n  }\n\n  get theme() {\n    return this.options.theme;\n  }\n\n  /** Global meta tags */\n\n  get title() {\n    return this.options.title;\n  }\n\n  get description() {\n    return this.options.description;\n  }\n\n  get image() {\n    return this.options.image;\n  }\n\n  get tags() {\n    return this.options.tags;\n  }\n\n  get gaTracking() {\n    return this.options.gaTracking;\n  }\n\n  get size() {\n    return this.options.size;\n  }\n\n  createShareButton(buttonName: string) {\n\n    switch (buttonName.toLowerCase()) {\n      case this.meta.facebook.type:\n        return new FacebookButton(this.meta.facebook, this.http);\n      case this.meta.twitter.type:\n        return new TwitterButton(this.meta.twitter);\n      case this.meta.google.type:\n        return new GoogleButton(this.meta.google, this.http);\n      case this.meta.pinterest.type:\n        return new PinterestButton(this.meta.pinterest, this.http);\n      case this.meta.linkedin.type:\n        return new LinkedinButton(this.meta.linkedin, this.http);\n      case this.meta.reddit.type:\n        return new RedditButton(this.meta.reddit, this.http);\n      case this.meta.tumblr.type:\n        return new TumblrButton(this.meta.tumblr, this.http);\n      case this.meta.stumble.type:\n        return new StumbleButton(this.meta.stumble);\n      case this.meta.whatsapp.type:\n        return new WhatsappButton(this.meta.whatsapp);\n      case this.meta.vk.type:\n        return new VKontakteButton(this.meta.vk);\n      case this.meta.telegram.type:\n        return new TelegramButton(this.meta.telegram);\n      case this.meta.email.type:\n        return new EmailButton(this.meta.email);\n      case this.meta.copy.type:\n        return new CopyButton(this.meta.copy);\n      case this.meta.print.type:\n        return new PrintButton(this.meta.print);\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Determine the mobile operating system.\n   * This function returns one of 'iOS', 'Android', 'Windows Phone', or 'unknown'.\n   */\n  getMobileOS() {\n    // const userAgent = navigator.userAgent || navigator.vendor || (window || global).opera;\n\n    // Windows Phone must come first because its UA also contains \"Android\"\n    // if (/windows phone/i.test(userAgent)) {\n    //   return 'WindowsPhone';\n    // }\n\n    // if (/android/i.test(userAgent)) {\n    //   return 'Android';\n    // }\n\n    // iOS detection from: http://stackoverflow.com/a/9039885/177710\n    // if (/iPad|iPhone|iPod/.test(userAgent) && !(window || global).MSStream) {\n    //   return 'iOS';\n    // }\n\n    return undefined;\n  }\n\n}\n\n/**\n * Simple object check.\n */\nfunction isObject(item) {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n * Deep merge two objects.\n */\nfunction mergeDeep(target, ...sources) {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n","import { NgModule, InjectionToken } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\n\nimport { ShareButtonsService } from '../services/share-buttons.service';\nimport { ShareButtonDirective } from '../directives/share-button.directive';\nimport { NFormatterPipe } from '../pipes/n-formatter.pipe';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\nimport { UniversalSupportService } from '../services/universal-support.service';\nimport { OPTIONS, BUTTONS_META } from './tokens';\n\nexport function ShareButtonsFactory(httpClient: HttpClient, options: ShareButtonsOptions, buttonsMeta: ShareButtonsMeta) {\n  return new ShareButtonsService(httpClient, options, buttonsMeta);\n}\n\n@NgModule({\n  declarations: [\n    ShareButtonDirective,\n    NFormatterPipe\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    CommonModule,\n    ShareButtonDirective,\n    NFormatterPipe\n  ],\n  providers: [ UniversalSupportService ]\n})\nexport class ShareDirectiveModule {\n  static forRoot(options?: ShareButtonsOptions, buttonsMeta?: ShareButtonsMeta) {\n    return {\n      ngModule: ShareDirectiveModule,\n      providers: [\n        {provide: OPTIONS, useValue: options},\n        {provide: BUTTONS_META, useValue: buttonsMeta},\n        {\n          provide: ShareButtonsService,\n          useFactory: ShareButtonsFactory,\n          deps: [HttpClient, OPTIONS, BUTTONS_META]\n        }\n      ]\n    };\n  }\n}\n\n","import { NgModule, InjectionToken } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ShareDirectiveModule } from './share-directive.module';\n\nimport { ShareButtonsService } from '../services/share-buttons.service';\nimport { ShareButtonComponent } from '../components/share-button/share-button.component';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\nimport { OPTIONS, BUTTONS_META } from './tokens';\n\nexport function ShareButtonsFactory(httpClient: HttpClient, options: ShareButtonsOptions, buttonsMeta: ShareButtonsMeta) {\n  return new ShareButtonsService(httpClient, options, buttonsMeta);\n}\n\n@NgModule({\n  declarations: [\n    ShareButtonComponent\n  ],\n  imports: [\n    ShareDirectiveModule\n  ],\n  exports: [\n    ShareDirectiveModule,\n    ShareButtonComponent\n  ]\n})\nexport class ShareButtonModule {\n  static forRoot(options?: ShareButtonsOptions, buttonsMeta?: ShareButtonsMeta) {\n    return {\n      ngModule: ShareButtonModule,\n      providers: [\n        {provide: OPTIONS, useValue: options},\n        {provide: BUTTONS_META, useValue: buttonsMeta},\n        {\n          provide: ShareButtonsService,\n          useFactory: ShareButtonsFactory,\n          deps: [HttpClient, OPTIONS, BUTTONS_META]\n        }\n      ]\n    };\n  }\n}\n\n","import { NgModule, InjectionToken } from '@angular/core';\n\nimport { ShareButtonModule } from './share-button.module';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ShareButtonsService } from '../services/share-buttons.service';\nimport { ShareButtonsComponent } from '../components/share-buttons/share-buttons.component';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\nimport { OPTIONS, BUTTONS_META } from './tokens';\n\nexport function ShareButtonsFactory(httpClient: HttpClient, options: ShareButtonsOptions, buttonsMeta: ShareButtonsMeta) {\n  return new ShareButtonsService(httpClient, options, buttonsMeta);\n}\n\n@NgModule({\n  declarations: [\n    ShareButtonsComponent\n  ],\n  imports: [\n    ShareButtonModule\n  ],\n  exports: [\n    ShareButtonModule,\n    ShareButtonsComponent\n  ]\n})\nexport class ShareButtonsModule {\n  static forRoot(options?: ShareButtonsOptions, buttonsMeta?: ShareButtonsMeta) {\n    return {\n      ngModule: ShareButtonsModule,\n      providers: [\n        {provide: OPTIONS, useValue: options},\n        {provide: BUTTONS_META, useValue: buttonsMeta},\n        {\n          provide: ShareButtonsService,\n          useFactory: ShareButtonsFactory,\n          deps: [HttpClient, OPTIONS, BUTTONS_META]\n        }\n      ]\n    };\n  }\n}\n\n","import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonProp } from '../models/share-buttons.models';\n\nexport class FacebookButton implements IShareButton {\n\n  constructor(public prop: ShareButtonProp, private http: HttpClient) {\n  }\n\n  link(url: string) {\n\n    return this.prop.shareUrl + url;\n  }\n\n  count(url: string) {\n\n    return this.http.get<ICount>(this.prop.countUrl + url)\n      .filter(res => !!(res.share && res.share.share_count))\n      .map(res => +res.share.share_count)\n      .catch(err => Observable.empty());\n  }\n}\n\n/** Facebook Count interface */\n\ninterface Share {\n  comment_count: number;\n  share_count: number;\n}\n\ninterface OgObject {\n  id: string;\n  description: string;\n  title: string;\n  type: string;\n  updated_time: Date;\n}\n\ninterface ICount {\n  share: Share;\n  og_object: OgObject;\n  id: string;\n}\n","/** TWITTER DOCS: https://dev.twitter.com/web/tweet-button/web-intent */\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\n\nexport class TwitterButton implements IShareButton {\n\n  constructor(public prop: ShareButtonProp) {\n  }\n\n  link(url: string, args?: ShareButtonArgs) {\n\n    let shareUrl = this.prop.shareUrl + url;\n\n    if (args.description) {\n      shareUrl += '&text=' + args.description;\n    }\n\n    if (args.via) {\n      shareUrl += '&via=' + args.via;\n    }\n\n    if (args.tags) {\n      shareUrl += '&hashtags=' + args.tags;\n    }\n\n    return shareUrl;\n  }\n\n  count() {\n\n    return Observable.empty();\n  }\n\n}\n","/** LINKEDIN DOCS https://developer.linkedin.com/docs/share-on-linkedin#! */\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\n\nexport class LinkedinButton implements IShareButton {\n\n  constructor(public prop: ShareButtonProp, private http: HttpClient) {\n  }\n\n  link(url: string, args?: ShareButtonArgs) {\n\n    let shareUrl = this.prop.shareUrl + url;\n\n    if (args.title) {\n      shareUrl += '&title=' + args.title;\n    }\n    if (args.description) {\n      shareUrl += '&summary=' + args.description;\n    }\n\n    return shareUrl;\n  }\n\n  count(url: string) {\n\n    return this.http.jsonp<ICount>(this.prop.countUrl + url, 'callback')\n      .filter(res => !!res.count)\n      .map(res => +res.count)\n      .catch(err => Observable.empty());\n  }\n}\n\n/** LinkedIn count interface */\n\nexport interface ICount {\n  count: number;\n  fCnt: string;\n  fCntPlusOne: string;\n  url: string;\n}\n","/** TUMBLR DOCS: https://www.tumblr.com/docs/en/share_button */\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\n\nexport class TumblrButton implements IShareButton {\n\n  constructor(public prop: ShareButtonProp, private http: HttpClient) {\n  }\n\n  link(url: string, args?: ShareButtonArgs) {\n\n    let shareUrl = this.prop.shareUrl + url;\n\n    if (args.description) {\n      shareUrl += '&caption=' + args.description;\n    }\n\n    if (args.tags) {\n      shareUrl += '&tags=' + args.tags;\n    }\n\n    return shareUrl;\n  }\n\n  count(url: string) {\n\n    return this.http.jsonp<ICount>(this.prop.countUrl + url, 'callback')\n      .filter(res => !!(res.response && res.response.note_count))\n      .map(res => +res.response.note_count)\n      .catch(err => Observable.empty());\n  }\n}\n\n/** Tumblr count interface*/\n\ninterface Meta {\n  status: number;\n  msg: string;\n}\n\ninterface Response {\n  url: string;\n  note_count: number;\n}\n\ninterface ICount {\n  meta: Meta;\n  response: Response;\n}\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\n\nexport class WhatsappButton implements IShareButton {\n\n  constructor(public prop: ShareButtonProp) {\n  }\n\n  link(url: string, args?: ShareButtonArgs) {\n\n    let shareUrl = this.prop.shareUrl;\n\n    if (args.description) {\n      shareUrl += args.description + ' %0A';\n    }\n\n    return shareUrl + url;\n  }\n\n  count() {\n\n    return Observable.empty();\n  }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\n\nexport class PinterestButton implements IShareButton {\n\n  constructor(public prop: ShareButtonProp, private http: HttpClient) {\n  }\n\n  link(url: string, args?: ShareButtonArgs) {\n\n    let shareUrl = this.prop.shareUrl + url;\n\n    /** The description and the image are required to get the pin button to work. */\n\n    if (args.description) {\n      shareUrl += '&description=' + args.description;\n    } else if (document) {\n\n      /** If user didn't add description, get it from the OG meta tag */\n      const ogDescription: Element = document.querySelector('meta[property=\"og:description\"]');\n      if (ogDescription) {\n        shareUrl += '&description=' + ogDescription.getAttribute('content');\n      } else {\n        console.warn('[ShareButtons]: You didn\\'t set the description text for Pinterest button');\n      }\n    }\n\n    if (args.image) {\n      shareUrl += '&media=' + args.image;\n    } else if (document) {\n      const ogImage: Element = document.querySelector('meta[property=\"og:image\"]');\n      if (ogImage) {\n        shareUrl += '&media=' + ogImage.getAttribute('content');\n      } else {\n        console.warn('[ShareButtons]: You didn\\'t set the image URL for Pinterest button');\n      }\n    }\n\n    return shareUrl;\n  }\n\n  count(url: string) {\n\n    return this.http.get(this.prop.countUrl + url, {responseType: 'text'})\n      .map(text => <ICount>JSON.parse(text.replace(/^receiveCount\\((.*)\\)/, '$1')))\n      .filter(res => !!res.count)\n      .map(res => +res.count)\n      .catch(err => Observable.empty());\n  }\n\n}\n\n/** Pinterest count interface */\n\ninterface ICount {\n  url: string;\n  count: number;\n}\n","/** REDDIT DOCS: http://stackoverflow.com/questions/24823114/post-to-reddit-via-url */\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\n\nexport class RedditButton implements IShareButton {\n\n  constructor(public prop: ShareButtonProp, private http: HttpClient) {\n  }\n\n  link(url: string, args?: ShareButtonArgs) {\n\n    let shareUrl = this.prop.shareUrl + url;\n\n    if (args.title) {\n      shareUrl += '&title=' + args.title;\n    }\n\n    return shareUrl;\n  }\n\n  count(url: string) {\n\n    return this.http.get<ICount>(this.prop.countUrl + url)\n      .filter(res => !!(res.data && res.data.children && res.data.children.length))\n      .map(res => +res.data.children[0].data.score)\n      .catch(err => Observable.empty());\n  }\n}\n\n\n/** Reddit count interface */\n\ninterface Source {\n  url: string;\n  width: number;\n  height: number;\n}\n\ninterface Resolution {\n  url: string;\n  width: number;\n  height: number;\n}\n\ninterface Image {\n  source: Source;\n  resolutions: Resolution[];\n  id: string;\n}\n\ninterface Preview {\n  images: Image[];\n  enabled: boolean;\n}\n\ninterface Data2 {\n  domain: string;\n  approved_at_utc?: any;\n  banned_by?: any;\n  thumbnail_width: number;\n  subreddit: string;\n  selftext_html?: any;\n  selftext: string;\n  likes?: any;\n  suggested_sort?: any;\n  user_reports: any[];\n  secure_media?: any;\n  link_flair_text?: any;\n  id: string;\n  banned_at_utc?: any;\n  view_count?: any;\n  archived: boolean;\n  clicked: boolean;\n  report_reasons?: any;\n  title: string;\n  media?: any;\n  mod_reports: any[];\n  can_mod_post: boolean;\n  author_flair_text?: any;\n  score: number;\n  approved_by?: any;\n  over_18: boolean;\n  hidden: boolean;\n  preview: Preview;\n  thumbnail: string;\n  subreddit_id: string;\n  edited: boolean;\n  link_flair_css_class?: any;\n  author_flair_css_class?: any;\n  contest_mode: boolean;\n  gilded: number;\n  downs: number;\n  brand_safe: boolean;\n  saved: boolean;\n  removal_reason?: any;\n  post_hint: string;\n  stickied: boolean;\n  can_gild: boolean;\n  thumbnail_height: number;\n  parent_whitelist_status?: any;\n  name: string;\n  spoiler: boolean;\n  permalink: string;\n  subreddit_type: string;\n  locked: boolean;\n  hide_score: boolean;\n  created: number;\n  url: string;\n  whitelist_status?: any;\n  quarantine: boolean;\n  author: string;\n  created_utc: number;\n  subreddit_name_prefixed: string;\n  ups: number;\n  num_comments: number;\n  is_self: boolean;\n  visited: boolean;\n  num_reports?: any;\n  is_video: boolean;\n  distinguished?: any;\n}\n\ninterface Child {\n  kind: string;\n  data: Data2;\n}\n\ninterface Data {\n  modhash: string;\n  children: Child[];\n  after?: any;\n  before?: any;\n}\n\ninterface ICount {\n  kind: string;\n  data: Data;\n}\n","/** GPLUS DOCS: https://developers.google.com/+/web/share/#sharelink */\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/empty';\nimport { IShareButton, ShareButtonProp } from '../models/share-buttons.models';\n\nexport class GoogleButton implements IShareButton {\n\n  constructor(public prop: ShareButtonProp, private http: HttpClient) {\n  }\n\n  link(url: string) {\n    return this.prop.shareUrl + url;\n  }\n\n  count(url: string) {\n\n    return Observable.empty();\n  }\n}\n","/** STUMBLE DOCS: http://stackoverflow.com/questions/10591424/how-can-i-create-a-custom-stumbleupon-button */\nimport { IShareButton, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\n\nexport class StumbleButton implements IShareButton {\n\n  constructor(public prop: ShareButtonProp) {\n  }\n\n  link(url: string) {\n\n    return this.prop.shareUrl + url;\n  }\n\n  count() {\n\n    return Observable.empty();\n  }\n}\n\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\n\nexport class TelegramButton implements IShareButton {\n\n  constructor(public prop: ShareButtonProp) {\n  }\n\n  link(url: string, args?: ShareButtonArgs) {\n\n    let shareUrl = this.prop.shareUrl + url;\n\n    if (args.description) {\n      shareUrl += '&text=' + args.description;\n    }\n\n    return shareUrl;\n  }\n\n  count() {\n\n    return Observable.empty();\n  }\n\n}\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/Observable';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\n\nexport class EmailButton implements IShareButton {\n\n  constructor(public prop: ShareButtonProp) {\n  }\n\n  link(url: string, args?: ShareButtonArgs) {\n\n    let shareUrl = this.prop.shareUrl + args.email;\n\n    if (args.title) {\n      shareUrl += '&subject=' + args.title;\n    }\n\n    shareUrl += '&body=';\n    if (args.description) {\n      shareUrl += args.description + ' %0A';\n    }\n\n    return shareUrl + url;\n  }\n\n  count() {\n\n    return Observable.empty();\n  }\n\n}\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { ShareButtonDirective } from '../directives/share-button.directive';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/operator/delay';\nimport 'rxjs/add/operator/take';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\n\nexport class CopyButton implements IShareButton {\n\n  constructor(public prop: ShareButtonProp) {\n  }\n\n  link(url: string, args?: ShareButtonArgs) {\n    this.copyURLToClipboard(url, args.directive);\n    return null;\n  }\n\n  count() {\n\n    return Observable.empty();\n  }\n\n  /** copy URL to clipboard */\n  copyURLToClipboard(url: string, directive: ShareButtonDirective) {\n\n    const temp = {text: directive.shareButton.prop.text, icon: directive.shareButton.prop.icon};\n    Observable.of({}).take(1).do(() => {\n        url = decodeURIComponent(url);\n        const textArea = directive.renderer.createElement('textarea');\n\n        // Place in top-left corner of screen regardless of scroll position.\n        directive.renderer.setStyle(textArea, 'position', 'fixed');\n        directive.renderer.setStyle(textArea, 'top', 0);\n        directive.renderer.setStyle(textArea, 'left', 0);\n\n        // Ensure it has a small width and height. Setting to 1px / 1em\n        // doesn't work as directive gives a negative w/h on some browsers.\n        directive.renderer.setStyle(textArea, 'width', '2em');\n        directive.renderer.setStyle(textArea, 'height', '2em');\n\n        // We don't need padding, reducing the size if it does flash render\n        directive.renderer.setStyle(textArea, 'padding', 0);\n\n        // Clean up any borders.\n        directive.renderer.setStyle(textArea, 'border', 'none');\n        directive.renderer.setStyle(textArea, 'outline', 'none');\n        directive.renderer.setStyle(textArea, 'boxShadow', 'none');\n\n        // Avoid flash of white box if rendered for any reason.\n        directive.renderer.setStyle(textArea, 'background', 'transparent');\n        directive.renderer.setProperty(textArea, 'value', url);\n        directive.renderer.appendChild(directive.el, textArea);\n\n        textArea.select();\n\n        document.execCommand('copy');\n\n        directive.renderer.removeChild(directive.el, textArea);\n\n        directive.shareButton.prop.text = this.prop.successText;\n        directive.shareButton.prop.icon = this.prop.successIcon;\n        directive.cd.markForCheck();\n      },\n      () => {\n        directive.shareButton.prop.text = this.prop.failText;\n        directive.shareButton.prop.icon = this.prop.failIcon;\n        directive.cd.markForCheck();\n        console.warn('[ShareButtons]: Print button could not copy URL to clipboard');\n      })\n      .delay(2000)\n      .do(() => {\n        directive.shareButton.prop.text = temp.text;\n        directive.shareButton.prop.icon = temp.icon;\n        directive.cd.markForCheck();\n      })\n      .subscribe();\n\n  }\n\n}\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\n\nexport class PrintButton implements IShareButton {\n\n  constructor(public prop: ShareButtonProp) {\n  }\n\n  link(url: string, args?: ShareButtonArgs) {\n\n    args.directive.window.print();\n    return null;\n  }\n\n  count() {\n\n    return Observable.empty();\n  }\n\n}\n","/** VK DOCS: https://vk.com/dev/widget_share */\n\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\n\nexport class VKontakteButton implements IShareButton {\n\n  constructor(public prop: ShareButtonProp) {\n  }\n\n  link(url: string, args?: ShareButtonArgs) {\n    return this.prop.shareUrl + url;\n  }\n\n  count() {\n    return Observable.empty();\n  }\n\n}\n","export * from './facebook.class';\nexport * from './twitter.class';\nexport * from './linkedin.class';\nexport * from './tumblr.class';\nexport * from './whatsapp.class';\nexport * from './pinterest.class';\nexport * from './reddit.class';\nexport * from './google.class';\nexport * from './stumble.class';\nexport * from './telegram.class';\nexport * from './email.class';\nexport * from './copy.class';\nexport * from './print.class';\nexport * from './vk.class';\n\nexport const Buttons = {\n  facebook: {\n    type: 'facebook',\n    text: 'Facebook',\n    icon: 'fa fa-facebook',\n    color: '#3b5998',\n    supportCount: true,\n    shareUrl: 'https://www.facebook.com/sharer/sharer.php?u=',\n    androidUrl: 'com.facebook.katana',\n    iosUrl: 'fb://',\n    countUrl: 'https://graph.facebook.com?id='\n  },\n  twitter: {\n    type: 'twitter',\n    text: 'Twitter',\n    icon: 'fa fa-twitter',\n    color: '#00acee',\n    supportCount: false,\n    shareUrl: 'https://twitter.com/intent/tweet?url=',\n    androidUrl: 'com.twitter.package',\n    iosUrl: 'twitter://tweet?url='\n  },\n  google: {\n    type: 'google',\n    text: 'Google+',\n    icon: 'fa fa-google-plus',\n    color: '#DB4437',\n    supportCount: false,\n    shareUrl: 'https://plus.google.com/share?url=',\n    androidUrl: '',\n    iosUrl: '',\n  },\n  linkedin: {\n    type: 'linkedin',\n    text: 'LinkedIn',\n    icon: 'fa fa-linkedin',\n    color: '#006fa6',\n    supportCount: true,\n    shareUrl: 'http://www.linkedin.com/shareArticle?url=',\n    androidUrl: 'com.linkedin.android',\n    iosUrl: 'linkedin://',\n    countUrl: 'https://www.linkedin.com/countserv/count/share?url='\n  },\n  pinterest: {\n    type: 'pinterest',\n    text: 'Pinterest',\n    icon: 'fa fa-pinterest-p',\n    color: '#BD091D',\n    supportCount: true,\n    shareUrl: 'https://in.pinterest.com/pin/create/button/?url=',\n    androidUrl: '',\n    iosUrl: '',\n    countUrl: 'https://api.pinterest.com/v1/urls/count.json?callback=receiveCount&url='\n  },\n  reddit: {\n    type: 'reddit',\n    text: 'Reddit',\n    icon: 'fa fa-reddit-alien',\n    color: '#FF4006',\n    supportCount: true,\n    shareUrl: 'http://www.reddit.com/submit?url=',\n    androidUrl: '',\n    iosUrl: '',\n    countUrl: 'https://buttons.reddit.com/button_info.json?url='\n  },\n  tumblr: {\n    type: 'tumblr',\n    text: 'Tumblr',\n    icon: 'fa fa-tumblr',\n    color: '#36465D',\n    supportCount: true,\n    shareUrl: 'http://tumblr.com/widgets/share/tool?canonicalUrl=',\n    androidUrl: '',\n    iosUrl: '',\n    countUrl: 'https://api.tumblr.com/v2/share/stats?url='\n  },\n  print: {\n    type: 'print',\n    text: 'Print',\n    icon: 'fa fa-print',\n    color: 'brown',\n    supportCount: false\n  },\n  stumble: {\n    type: 'stumble',\n    text: 'Stumble',\n    icon: 'fa fa-stumbleupon',\n    color: '#eb4924',\n    supportCount: false,\n    shareUrl: 'http://www.stumbleupon.com/submit?url=',\n    androidUrl: '',\n    iosUrl: ''\n  },\n  telegram: {\n    type: 'telegram',\n    text: 'Telegram',\n    icon: 'fa fa-send',\n    color: '#0088cc',\n    supportCount: false,\n    shareUrl: 'https://t.me/share/url?url=',\n    androidUrl: '',\n    iosUrl: ''\n  },\n  vk: {\n    type: 'vk',\n    text: 'VKontakte',\n    icon: 'fa fa-vk',\n    color: '#4C75A3',\n    supportCount: false,\n    shareUrl: 'http://vk.com/share.php?url=',\n    androidUrl: '',\n    iosUrl: ''\n  },\n  copy: {\n    type: 'copy',\n    text: 'Copy link',\n    successText: 'Copied',\n    successIcon: 'fa fa-check',\n    failText: 'Error',\n    failIcon: 'fa fa-exclamation',\n    icon: 'fa fa-link',\n    color: '#607D8B',\n    supportCount: false\n  },\n  whatsapp: {\n    type: 'whatsapp',\n    text: 'WhatsApp',\n    icon: 'fa fa-whatsapp',\n    color: '#25D366',\n    supportCount: false,\n    shareUrl: 'https://web.whatsapp.com/send?text=',\n    androidUrl: 'com.whatsapp.package',\n    iosUrl: 'whatsapp://?text='\n  },\n  email: {\n    type: 'email',\n    text: 'Email',\n    icon: 'fa fa-envelope',\n    color: '#32A1A3',\n    supportCount: false,\n    shareUrl: 'mailto:?'\n  }\n};\n","import { InjectionToken } from '@angular/core';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\n\nexport const OPTIONS = new InjectionToken<ShareButtonsOptions>('OPTIONS');\nexport const BUTTONS_META = new InjectionToken<ShareButtonsMeta>('BUTTONS_META');\n","import { Injectable } from '@angular/core';\n\ndeclare const global: any;\ndeclare const window: any;\n\n@Injectable()\nexport class UniversalSupportService {\n\n    get nativeWindow() {\n        try {\n            return window;\n        } catch (e) {\n          return global;\n        }\n    }\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  HostListener,\n  EventEmitter,\n  ElementRef,\n  Renderer2,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { ShareButtonsService } from '../services/share-buttons.service';\nimport { IShareButton } from '../models/share-buttons.models';\nimport { UniversalSupportService } from '../services/universal-support.service';\n\n/** Google analytics ref */\ndeclare const ga: Function;\n\n@Directive({\n  selector: '[shareButton]'\n})\nexport class ShareButtonDirective {\n\n  /** Window ref that supports Universal */\n  window: Window;\n\n  /** Element ref */\n  el: HTMLElement;\n\n  /** Share button type */\n  shareButton: IShareButton;\n\n  /** Validated share URL */\n  url: string;\n\n  /** Share meta tags */\n  @Input() sbTitle = this.share.title;\n  @Input() sbDescription = this.share.description;\n  @Input() sbImage = this.share.image;\n  @Input() sbTags = this.share.tags;\n\n  /** Set button class, e.g. 'sb-facebook' */\n  buttonClass: string;\n\n  /** Set share button e.g facebook, twitter...etc  */\n  @Input('shareButton')\n  set createButton(buttonName: string) {\n\n    /** Create a new button of type <buttonName> */\n    const button = this.share.createShareButton(buttonName);\n\n    if (button) {\n      this.shareButton = button;\n\n      /** Remove old button class in case user changed the button */\n      this.renderer.removeClass(this.el, 'sb-' + this.buttonClass);\n\n      /** Add new button class e.g.: sb-facebook, sb-twitter ...etc */\n      this.renderer.addClass(this.el, 'sb-' + button.prop.type);\n\n      /** Keep a copy of current class */\n      this.buttonClass = button.prop.type;\n\n      /** Get link's shared count */\n      this.getCount();\n    } else {\n      throw new Error(`[ShareButtons]: The share button \"${buttonName}\" does not exist. Make sure the button name is correct!`);\n    }\n  }\n\n  /** Set share URL */\n  @Input()\n  set sbUrl(url: string) {\n\n    /** Check if current URL equals previous URL */\n    if (url !== this.url) {\n      this.url = this.validateUrl(url);\n      this.getCount();\n    }\n  }\n\n  /** Google analytics tracking*/\n  @Input() gaTracking = this.share.gaTracking;\n\n  /** Share count event */\n  @Output() sbCount = new EventEmitter<number>();\n\n  /** Share dialog opened event */\n  @Output() sbOpened = new EventEmitter<string>();\n\n  /** Share dialog closed event */\n  @Output() sbClosed = new EventEmitter<string>();\n\n  constructor(private share: ShareButtonsService,\n    public renderer: Renderer2,\n    public cd: ChangeDetectorRef,\n    el: ElementRef,\n    universal: UniversalSupportService) {\n    this.el = el.nativeElement;\n    this.window = universal.nativeWindow;\n  }\n\n  /** Open share dialog */\n  @HostListener('click')\n  onClick() {\n    /** Set user did not set the url using [sbUrl], use window URL */\n    if (!this.url) {\n      this.url = encodeURIComponent(this.window.location.href);\n    }\n\n    /** Get sharing link */\n    const shareUrl = this.shareButton.link(this.url, {\n      title: this.sbTitle,\n      description: this.sbDescription,\n      image: this.sbImage,\n      tags: this.sbTags,\n      mobile: this.share.getMobileOS(),\n      via: this.share.twitterAccount,\n      directive: this\n    });\n\n    /** GA tracking */\n    if (this.gaTracking && typeof ga !== 'undefined') {\n      ga('send', 'social', this.shareButton.prop.type, 'click', this.url);\n    }\n\n    let popUp;\n    if (shareUrl) {\n      /** Open share dialog */\n      popUp = this.window.open(shareUrl, 'newwindow', this.share.dialogSize);\n    }\n\n    /** Emit opened dialog type */\n    this.sbOpened.emit(this.shareButton.prop.type);\n\n    /** If dialog closed event has subscribers, emit closed dialog type */\n    if (this.sbClosed.observers.length && popUp) {\n      const pollTimer = this.window.setInterval(() => {\n        if (popUp.closed) {\n          this.window.clearInterval(pollTimer);\n          this.sbClosed.emit(this.shareButton.prop.type);\n        }\n      }, 200);\n    }\n\n  }\n\n  getCount() {\n    /** Only if share count has observers & the button has support for share count */\n    if (this.url && this.sbCount.observers.length && this.shareButton.prop.supportCount) {\n\n      /** Emit share count to (sbCount) Output */\n      this.shareButton.count(this.url).subscribe((count: number) => this.sbCount.emit(count));\n    }\n  }\n\n  validateUrl(url: string) {\n    /** Use encodeURIComponent to let URLs with the hash location strategy to work in tweets */\n\n    if (url) {\n      const r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n\n      if (r.test(url)) {\n        return encodeURIComponent(url);\n      }\n      console.warn(`[ShareButtons]: The share URL \"${url}\" is invalid!`);\n    }\n    /** fallback to current page URL */\n    return encodeURIComponent(this.window.location.href);\n  }\n\n}\n\n\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'nFormatter'\n})\nexport class NFormatterPipe implements PipeTransform {\n\n  transform(num: any, digits?: any): any {\n\n    if (typeof num !== 'number') {\n      num = 1;\n    }\n\n    return nFormatter(num, digits);\n  }\n\n}\n\n/** Change share counts to a readable number e.g 35.6k */\nexport const nFormatter = (num: number, digits: number) => {\n\n  const si = [\n    {value: 1E18, symbol: 'E'},\n    {value: 1E15, symbol: 'P'},\n    {value: 1E12, symbol: 'T'},\n    {value: 1E9, symbol: 'G'},\n    {value: 1E6, symbol: 'M'},\n    {value: 1E3, symbol: 'K'}\n  ], rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n\n  for (let i = 0; i < si.length; i++) {\n    if (num >= si[i].value) {\n      return (num / si[i].value).toFixed(digits).replace(rx, '$1') + si[i].symbol;\n    }\n  }\n  return num.toFixed(digits).replace(rx, '$1');\n};\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  ViewChild,\n  ChangeDetectorRef,\n  ElementRef,\n  HostBinding\n} from '@angular/core';\n\nimport { ShareButtonDirective } from '../../directives/share-button.directive';\nimport { ShareButtonsService } from '../../services/share-buttons.service';\n\n@Component({\n  selector: 'share-button',\n  template: `\n    <button class=\"sb-wrapper\"\n            [shareButton]=\"button\"\n            [sbUrl]=\"url\"\n            [sbImage]=\"image\"\n            [sbTitle]=\"title\"\n            [sbDescription]=\"description\"\n            [sbTags]=\"tags\"\n            (sbOpened)=\"opened.emit($event)\"\n            (sbClosed)=\"closed.emit($event)\"\n            [class.sb-show-count]=\"showCount && shareCount\"\n            [class.sb-show-template]=\"template.innerText?.length\"\n            [class.sb-show-text]=\"showName && !template.childElementCount\"\n            [class.sb-show-icon]=\"showIcon && !template.childElementCount\"\n            [style.fontSize.px]=\"(1 + size/20) * 14\">\n\n      <div class=\"sb-inner\">\n\n        <!-- HIDE BUTTON'S ICON AND TEXT IF CUSTOM TEMPLATE IS USED -->\n\n        <div class=\"sb-content\" *ngIf=\"!template.childElementCount\">\n\n          <!-- BUTTON ICON -->\n          <div *ngIf=\"showIcon\" class=\"sb-icon\">\n            <i [class]=\"shareDirective.shareButton.prop.icon\" aria-hidden=\"true\"></i>\n          </div>\n\n          <!-- BUTTON TEXT -->\n          <div *ngIf=\"showName\" class=\"sb-text\">\n            {{ shareDirective.shareButton.prop.text }}\n          </div>\n\n        </div>\n\n        <!-- FOR CUSTOM TEMPLATE -->\n        <div #template class=\"sb-template\">\n          <ng-content></ng-content>\n        </div>\n\n        <!-- BUTTON COUNT -->\n        <div *ngIf=\"showCount && shareCount\" class=\"sb-count\">\n          <span>{{ shareCount | nFormatter }}</span>\n        </div>\n\n      </div>\n    </button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ShareButtonComponent implements OnDestroy {\n\n  /** Share URL */\n  url: string;\n\n  /** Share count value */\n  shareCount: number;\n\n  /** Button name e.g. fb, twitter, reddit...etc */\n  button: string;\n\n  @Input('button')\n  set createButton(button: string) {\n    this.shareCount = 0;\n    this.button = button;\n  }\n\n  /** on set share URL */\n  @Input('url')\n  set setUrl(newUrl: string) {\n    /** Reset share count when url changes */\n    this.shareCount = 0;\n    this.url = newUrl;\n  }\n\n  /** Share meta tags */\n  @Input() title: string;\n  @Input() description: string;\n  @Input() image: string;\n  @Input() tags: string;\n\n  /** Show button icon */\n  @Input() showIcon = true;\n\n  /** Show button name */\n  @Input() showName = false;\n\n  /** Button size */\n  @Input() size = this.share.size;\n\n  /** Get and display share count */\n  showCount = false;\n\n  @Input('showCount')\n  set setShowCount(show: boolean) {\n    this.showCount = show;\n    /** Subscribe to count event */\n\n    /** Check if sbCount has observers already, don't subscribe again */\n    if (!this.shareDirective.sbCount.observers.length) {\n\n      /** Subscribe to the directive count's event only if 'show' is true or 'sbCount' has observers */\n      if (this.showCount || this.count.observers.length) {\n        this.shareDirective.sbCount.subscribe(count => {\n          this.shareCount = count;\n          this.count.emit(count);\n          this.cd.markForCheck();\n        });\n      }\n\n    }\n\n  }\n\n  /** Button theme */\n  @Input('theme')\n  set setTheme(theme: string) {\n    this.buttonClass = 'sb-button sb-' + theme;\n  }\n\n  /** Set theme as button class */\n  @HostBinding('class') buttonClass = 'sb-button sb-' + this.share.theme;\n\n  /** Share count event */\n  @Output() count = new EventEmitter<number>();\n\n  /** Share dialog opened event */\n  @Output() opened = new EventEmitter<string>();\n\n  /** Share dialog closed event */\n  @Output() closed = new EventEmitter<string>();\n\n  /** Share directive ref */\n  @ViewChild(ShareButtonDirective)\n  shareDirective: ShareButtonDirective;\n\n  /** <ng-content> wrapper, used to add class e.g. sb-default, sb-text, sb-count */\n  @ViewChild('template')\n  template: ElementRef;\n\n  constructor(private cd: ChangeDetectorRef, private share: ShareButtonsService) {\n  }\n\n  ngOnDestroy() {\n    this.shareDirective.sbCount.complete();\n  }\n\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  ChangeDetectorRef,\n  QueryList,\n  ViewChildren,\n  OnInit,\n  HostBinding\n} from '@angular/core';\nimport { ShareButtonsService } from '../../services/share-buttons.service';\nimport { ShareButtonComponent } from '../share-button/share-button.component';\n\n@Component({\n  selector: 'share-buttons',\n  template: `\n    <share-button *ngFor=\"let button of buttons | slice: 0:shownButtons\" \n      [button]=\"button\" \n      [theme]=\"theme\"\n      [url]=\"url\"\n      [title]=\"title\"\n      [description]=\"description\" \n      [image]=\"image\" \n      [tags]=\"tags\" \n      [showCount]=\"showCount\" \n      [showIcon]=\"showIcon\" \n      [showName]=\"showName\"\n      [size]=\"size\" \n      (opened)=\"opened.emit($event)\" \n      (closed)=\"closed.emit($event)\"></share-button>\n\n    <div [class]=\"'sb-button sb-' + theme\" \n      [style.fontSize.px]=\"(1 + size/20) * 14\">\n\n      <!-- SHOW LESS BUTTON -->\n\n      <button *ngIf=\"showAll && shownButtons === buttons.length\" \n              class=\"sb-wrapper sb-more sb-show-icon\" (click)=\"less()\">\n\n        <div class=\"sb-inner\">\n          <div class=\"sb-content\">\n            <div class=\"sb-icon\"><i class=\"fa fa-minus\" aria-hidden=\"true\"></i></div>\n          </div>\n        </div>\n      </button>\n\n      <!-- SHOW MORE BUTTON -->\n\n        <button *ngIf=\"!showAll && shownButtons < buttons.length\"\n                class=\"sb-wrapper sb-more sb-show-icon\" (click)=\"more()\">\n      \n          <div class=\"sb-inner\">\n            <div class=\"sb-content\">\n              <div class=\"sb-icon\"><i class=\"fa fa-ellipsis-h\" aria-hidden=\"true\"></i></div>\n            </div>\n          </div>\n        </button>\n\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ShareButtonsComponent implements OnInit, OnDestroy {\n\n  /** Share URL */\n  url: string;\n\n  /** Share count value */\n  shareCount: number;\n\n  /** Share Buttons array */\n  buttons: string[] = [];\n\n  /** Buttons to include */\n  includeButtons: string[] = this.share.buttons;\n\n  /** Buttons to exclude */\n  excludeButtons: string[] = [];\n\n  @Input('include')\n  set include(includeButtons: string[]) {\n    this.includeButtons = includeButtons;\n    this.buttons = this.includeButtons.filter((btn) => this.excludeButtons.indexOf(btn) < 0);\n  }\n\n  @Input('exclude')\n  set exclude(excludeButtons: string[]) {\n    this.excludeButtons = excludeButtons;\n    this.buttons = this.includeButtons.filter((btn) => this.excludeButtons.indexOf(btn) < 0);\n  }\n\n  /** Number of shown buttons */\n  shownButtons = this.includeButtons.length;\n  /** Number of included buttons */\n  totalButtons;\n  /** Disable more/less buttons */\n  showAll = false;\n\n  @Input('show')\n  set setShownButtons(shownCount: number) {\n    this.shownButtons = shownCount;\n    this.totalButtons = this.buttons.length;\n    /** Set showAll to true if shown buttons count = selected buttons count */\n    this.showAll = this.shownButtons === this.totalButtons + 1;\n  }\n\n  /** Set share URL */\n  @Input('url')\n  set setUrl(newUrl: string) {\n    /** Reset share count on url changes */\n    this.shareCount = 0;\n    this.url = newUrl;\n  }\n\n  /** Share meta tags */\n  @Input() title: string;\n  @Input() description: string;\n  @Input() image: string;\n  @Input() tags: string;\n\n  /** Show button icon */\n  @Input() showIcon = true;\n\n  /** Show button name */\n  @Input() showName = false;\n\n  /** Button size */\n  @Input() size: number;\n\n  /** Get and display share count */\n  showCount = false;\n\n  @Input('showCount')\n  set setShowCount(show: boolean) {\n    this.showCount = show;\n\n    if (this.shareComponents) {\n      /** Subscribe to count event */\n      this.shareComponents.forEach((shareComponent: ShareButtonComponent) => {\n\n        /** Check if sbCount has observers already, don't subscribe again */\n        if (!shareComponent.count.observers.length) {\n\n          /** Subscribe to the component count event (only if [showCount]=true) */\n          if (show || this.count.observers.length) {\n            shareComponent.count.subscribe(count => {\n              this.shareCount = count;\n              this.count.emit(count);\n              this.cd.markForCheck();\n            });\n          }\n        }\n      });\n    }\n  }\n\n  /** Buttons theme */\n  theme;\n\n  @Input('theme')\n  set setTheme(theme: string) {\n    /** Set buttons' theme to override the default theme */\n    this.theme = theme;\n    /** Set buttons' container theme */\n    this.containerClass = 'sb-group sb-' + theme;\n  }\n\n  /** Set theme as buttons' container class */\n  @HostBinding('class') containerClass = 'sb-group sb-' + this.share.theme;\n\n  /** Share count event */\n  @Output() count = new EventEmitter<number>();\n\n  /** Share dialog opened event */\n  @Output() opened = new EventEmitter<string>();\n\n  /** Share dialog closed event */\n  @Output() closed = new EventEmitter<string>();\n\n  /** Share components ref */\n  @ViewChildren(ShareButtonComponent) shareComponents: QueryList<ShareButtonComponent>;\n\n  constructor(private cd: ChangeDetectorRef, public share: ShareButtonsService) {\n\n  }\n\n  ngOnInit() {\n    /**  if use didn't select the buttons use all */\n    if (!this.excludeButtons.length) {\n      this.buttons = this.includeButtons.filter((btn) => this.excludeButtons.indexOf(btn) < 0);\n    }\n  }\n\n  ngOnDestroy() {\n    this.shareComponents.forEach((shareComponent: ShareButtonComponent) => {\n      shareComponent.count.unsubscribe();\n    });\n  }\n\n  more() {\n    this.totalButtons = this.shownButtons;\n    this.shownButtons = this.buttons.length;\n    this.showAll = true;\n  }\n\n  less() {\n    this.shownButtons = this.totalButtons;\n    this.showAll = false;\n  }\n\n}\n"],"names":["item","Array","isArray","target","_i","sources","length","source","shift","isObject","key","Object","assign","_a","mergeDeep","_b","httpClient","options","buttonsMeta","ShareButtonsService","FacebookButton","prop","http","this","url","shareUrl","get","countUrl","filter","res","share","share_count","map","catch","err","Observable","empty","TwitterButton","args","description","via","tags","LinkedinButton","title","jsonp","count","TumblrButton","response","note_count","WhatsappButton","PinterestButton","document","ogDescription","querySelector","getAttribute","console","warn","image","ogImage","responseType","text","JSON","parse","replace","RedditButton","data","children","score","GoogleButton","StumbleButton","TelegramButton","EmailButton","email","CopyButton","copyURLToClipboard","directive","temp","shareButton","icon","of","take","do","decodeURIComponent","textArea","renderer","createElement","setStyle","setProperty","appendChild","el","select","execCommand","removeChild","_this","successText","successIcon","cd","markForCheck","failText","failIcon","delay","subscribe","PrintButton","window","print","VKontakteButton","Buttons","facebook","type","color","supportCount","androidUrl","iosUrl","twitter","google","linkedin","pinterest","reddit","tumblr","stumble","telegram","vk","copy","whatsapp","OPTIONS","InjectionToken","BUTTONS_META","meta","theme","dialogWidth","dialogHeight","include","allButtons","exclude","size","gaTracking","twitterAccount","btn","indexOf","buttonName","toLowerCase","Injectable","HttpClient","Inject","UniversalSupportService","e","global","universal","EventEmitter","nativeElement","nativeWindow","ShareButtonDirective","button","createShareButton","Error","removeClass","buttonClass","addClass","getCount","validateUrl","encodeURIComponent","location","href","link","sbTitle","sbDescription","sbImage","sbTags","mobile","getMobileOS","ga","popUp","open","dialogSize","sbOpened","emit","sbClosed","observers","pollTimer_1","setInterval","closed","clearInterval","sbCount","test","Directive","selector","Renderer2","ChangeDetectorRef","ElementRef","Input","Output","HostListener","NFormatterPipe","num","digits","nFormatter","Pipe","name","si","value","symbol","rx","i","toFixed","ShareDirectiveModule","ngModule","providers","provide","useValue","useFactory","ShareButtonsFactory","deps","NgModule","declarations","imports","CommonModule","exports","ShareButtonComponent","shareCount","newUrl","show","showCount","shareDirective","complete","Component","template","changeDetection","ChangeDetectionStrategy","OnPush","HostBinding","ViewChild","ShareButtonModule","buttons","includeButtons","ShareButtonsComponent","excludeButtons","shownCount","shownButtons","totalButtons","showAll","shareComponents","forEach","shareComponent","containerClass","unsubscribe","ViewChildren","ShareButtonsModule"],"mappings":"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"}