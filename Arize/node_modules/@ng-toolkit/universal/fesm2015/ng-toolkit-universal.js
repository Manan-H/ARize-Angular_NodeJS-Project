import { Injectable, Inject, PLATFORM_ID, NgModule, InjectionToken } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class WindowService {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        if (!isPlatformBrowser(platformId)) {
            // const req: any = this.injector.get(this.injector.get(USERAGENTTOKEN));
            // this._window = {navigator: {userAgent: req.get('User-Agent')}};
            this._window = (/** @type {?} */ ({ navigator: { userAgent: 'fakeAgent' } }));
        }
        else {
            this._window = window;
        }
    }
    /**
     * @return {?}
     */
    get nativeWindow() {
        return this._window;
    }
}
WindowService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
WindowService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class LocalStorageWrapper {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        if (isPlatformBrowser(platformId)) {
            this.localStorageRef = localStorage;
        }
        else {
            this.localStorageRef = {
                clear: () => { },
                getItem: (key) => (/** @type {?} */ (undefined)),
                key: (index) => (/** @type {?} */ (undefined)),
                removeItem: (key) => { },
                setItem: (key, value) => { },
                length: 0
            };
        }
    }
    /**
     * @return {?}
     */
    get localStorage() {
        return this.localStorageRef;
    }
}
LocalStorageWrapper.decorators = [
    { type: Injectable },
];
/** @nocollapse */
LocalStorageWrapper.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class DocumentService {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        if (!isPlatformBrowser(platformId)) {
            this._document = (/** @type {?} */ ((/** @type {?} */ ({
                getElementById: (id) => new HTMLElement(),
                getElementsByClassName: (className) => new HTMLCollection(),
                getElementsByName: (name) => new NodeList(),
                getElementsByTagName: (name) => new NodeList()
            }))));
        }
        else {
            console.log('in browser, assigning document');
            // this._document = document;
            this._document = (/** @type {?} */ ({}));
        }
    }
    /**
     * @return {?}
     */
    get nativeDocument() {
        console.log('get native document');
        console.log(this._document);
        return this._document;
    }
}
DocumentService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
DocumentService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const WINDOW = new InjectionToken('ng-toolkit-window');
/**
 * @param {?} windowService
 * @return {?}
 */
function windowFactory(windowService) {
    return windowService.nativeWindow;
}
/** @type {?} */
const LOCAL_STORAGE = new InjectionToken('ng-toolkit-local-storage');
/**
 * @param {?} localStorageWrapper
 * @return {?}
 */
function localStorageFactory(localStorageWrapper) {
    return localStorageWrapper.localStorage;
}
/** @type {?} */
const NGT_DOCUMENT = new InjectionToken('ng-toolkit-document');
/**
 * @param {?} documentService
 * @return {?}
 */
function documentFactory(documentService) {
    console.log('document factory');
    return documentService.nativeDocument;
}
class NgtUniversalModule {
}
NgtUniversalModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    WindowService,
                    { provide: WINDOW, useFactory: windowFactory, deps: [WindowService] },
                    DocumentService,
                    { provide: NGT_DOCUMENT, useFactory: documentFactory, deps: [DocumentService] },
                    LocalStorageWrapper,
                    { provide: LOCAL_STORAGE, useFactory: localStorageFactory, deps: [LocalStorageWrapper] }
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { windowFactory, localStorageFactory, documentFactory, WINDOW, LOCAL_STORAGE, NGT_DOCUMENT, NgtUniversalModule, DocumentService, LocalStorageWrapper as ɵb, WindowService as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,