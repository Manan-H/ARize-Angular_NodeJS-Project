"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const testing_1 = require("@angular-devkit/schematics/testing");
const testing_2 = require("@ng-toolkit/_utils/testing");
const test_1 = require("@schematics/angular/utility/test");
const collectionPath = path.join(__dirname, './collection.json');
describe('Universal', () => {
    let appTree;
    const schematicRunner = new testing_1.SchematicTestRunner('schematics', collectionPath);
    const defaultOptions = {
        clientProject: 'foo',
        disableBugsnag: true
    };
    beforeEach(() => {
        appTree = schematicRunner.runExternalSchematic('@schematics/angular', 'workspace', {
            name: 'workspace',
            version: '6.0.0',
            newProjectRoot: 'projects'
        });
        schematicRunner.runExternalSchematic('@schematics/angular', 'application', { name: 'foo' }, appTree);
    });
    it('Should create files', (done) => {
        schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
            testing_2.checkIfFileExists(tree, `/local.js`);
            testing_2.checkIfFileExists(tree, `/server.ts`);
            testing_2.checkIfFileExists(tree, `/projects/foo/src/app/app.browser.module.ts`);
            testing_2.checkIfFileExists(tree, `/projects/foo/src/app/app.server.module.ts`);
            testing_2.checkIfFileExists(tree, `/projects/foo/src/main.server.ts`);
            testing_2.checkIfFileExists(tree, `/webpack.server.config.js`);
            testing_2.checkIfFileExists(tree, `/ng-toolkit.json`);
            done();
        });
    });
    it('Should create scripts', (done) => {
        schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
            testing_2.shouldContainEntry(tree, `/package.json`, /"build:prod": "npm run build:ssr"/);
            done();
        });
    });
    it('Should add server build', (done) => {
        schematicRunner.runSchematicAsync('ng-add', defaultOptions, appTree).subscribe(tree => {
            const cliConfig = JSON.parse(test_1.getFileContent(tree, `/angular.json`));
            expect(cliConfig.projects.foo.architect.server).toBeDefined(`Can't find server build`);
            done();
        });
    });
});
//# sourceMappingURL=schematics_spec.js.map